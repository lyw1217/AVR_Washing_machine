
Washing_machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020e  00800100  000017ce  00001862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080030e  0080030e  00001a70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dd2  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001314  00000000  00000000  00005bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e09  00000000  00000000  00006eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  00008ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3f  00000000  00000000  00009398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025ee  00000000  00000000  00009dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000c3c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	5e c5       	rjmp	.+2748   	; 0xac2 <__vector_1>
       6:	00 00       	nop
       8:	cf c5       	rjmp	.+2974   	; 0xba8 <__vector_2>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ec       	ldi	r30, 0xCE	; 206
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 30       	cpi	r26, 0x0E	; 14
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae e0       	ldi	r26, 0x0E	; 14
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 31       	cpi	r26, 0x1E	; 30
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	be d5       	rcall	.+2940   	; 0xc40 <main>
      c4:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <button_Init>:
 */ 

#include "button.h"

void button_Init(){
	DDR_BUTTON &= ~((1<<RUN_BUTTON) | (1<<WASH_BUTTON) | (1<<RINSE_BUTTON) | (1<<SPIN_BUTTON) | (1<<RESERV_BUTTON) | (1<<POWER_BUTTON));
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	88 78       	andi	r24, 0x88	; 136
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <wash_Bt_State>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d2:	8f e3       	ldi	r24, 0x3F	; 63
      d4:	9c e9       	ldi	r25, 0x9C	; 156
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	f1 f7       	brne	.-4      	; 0xd6 <wash_Bt_State+0x4>
      da:	00 c0       	rjmp	.+0      	; 0xdc <wash_Bt_State+0xa>
      dc:	00 00       	nop
uint8_t wash_Bt_State(){
	static uint8_t prevState2 = 1; // static을 선언하면 전역변수처럼, 처음만 설정되고 다음부터는 기존 값을 그대로 사용한다.
	
	_delay_ms(10); // 채터링 예방
	
	if(((PIN_BUTTON & (0x01 << WASH_BUTTON)) == 0) && (prevState2 == 1)){ // 버튼 close 이면서 prevState == 1 --> 버튼이 처음 눌린 상태
      de:	90 b3       	in	r25, 0x10	; 16
      e0:	89 2f       	mov	r24, r25
      e2:	80 71       	andi	r24, 0x10	; 16
      e4:	94 fd       	sbrc	r25, 4
      e6:	07 c0       	rjmp	.+14     	; 0xf6 <wash_Bt_State+0x24>
      e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <prevState2.2232>
      ec:	91 30       	cpi	r25, 0x01	; 1
      ee:	19 f4       	brne	.+6      	; 0xf6 <wash_Bt_State+0x24>
		prevState2 = 0;
      f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <prevState2.2232>
		return 0;
      f4:	08 95       	ret
	}
	else if (((PIN_BUTTON & (0x01 << WASH_BUTTON)) == (0x01 << WASH_BUTTON)) && (prevState2 == 0)){ // 버튼이 open 이면서 prevState == 0 --> 버튼이 처음 눌렸다가 떼졌을 때
      f6:	90 b3       	in	r25, 0x10	; 16
      f8:	89 2f       	mov	r24, r25
      fa:	80 71       	andi	r24, 0x10	; 16
      fc:	94 ff       	sbrs	r25, 4
      fe:	09 c0       	rjmp	.+18     	; 0x112 <wash_Bt_State+0x40>
     100:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <prevState2.2232>
     104:	81 11       	cpse	r24, r1
     106:	04 c0       	rjmp	.+8      	; 0x110 <wash_Bt_State+0x3e>
		prevState2 = 1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <prevState2.2232>
		return 1;
     10e:	08 95       	ret
	}
	return 0;
     110:	80 e0       	ldi	r24, 0x00	; 0
}
     112:	08 95       	ret

00000114 <rinse_Bt_State>:
     114:	8f e3       	ldi	r24, 0x3F	; 63
     116:	9c e9       	ldi	r25, 0x9C	; 156
     118:	01 97       	sbiw	r24, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <rinse_Bt_State+0x4>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <rinse_Bt_State+0xa>
     11e:	00 00       	nop
uint8_t rinse_Bt_State(){
	static uint8_t prevState3 = 1; // static을 선언하면 전역변수처럼, 처음만 설정되고 다음부터는 기존 값을 그대로 사용한다.
	
	_delay_ms(10); // 채터링 예방
	
	if(((PIN_BUTTON & (0x01 << RINSE_BUTTON)) == 0) && (prevState3 == 1)){ // 버튼 close 이면서 prevState == 1 --> 버튼이 처음 눌린 상태
     120:	90 b3       	in	r25, 0x10	; 16
     122:	89 2f       	mov	r24, r25
     124:	80 72       	andi	r24, 0x20	; 32
     126:	95 fd       	sbrc	r25, 5
     128:	07 c0       	rjmp	.+14     	; 0x138 <rinse_Bt_State+0x24>
     12a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prevState3.2235>
     12e:	91 30       	cpi	r25, 0x01	; 1
     130:	19 f4       	brne	.+6      	; 0x138 <rinse_Bt_State+0x24>
		prevState3 = 0;
     132:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <prevState3.2235>
		return 0;
     136:	08 95       	ret
	}
	else if (((PIN_BUTTON & (0x01 << RINSE_BUTTON)) == (0x01 << RINSE_BUTTON)) && (prevState3 == 0)){ // 버튼이 open 이면서 prevState == 0 --> 버튼이 처음 눌렸다가 떼졌을 때
     138:	90 b3       	in	r25, 0x10	; 16
     13a:	89 2f       	mov	r24, r25
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	95 ff       	sbrs	r25, 5
     140:	09 c0       	rjmp	.+18     	; 0x154 <rinse_Bt_State+0x40>
     142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <prevState3.2235>
     146:	81 11       	cpse	r24, r1
     148:	04 c0       	rjmp	.+8      	; 0x152 <rinse_Bt_State+0x3e>
		prevState3 = 1;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <prevState3.2235>
		return 1;
     150:	08 95       	ret
	}
	return 0;
     152:	80 e0       	ldi	r24, 0x00	; 0
}
     154:	08 95       	ret

00000156 <spin_Bt_State>:
     156:	8f e3       	ldi	r24, 0x3F	; 63
     158:	9c e9       	ldi	r25, 0x9C	; 156
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <spin_Bt_State+0x4>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <spin_Bt_State+0xa>
     160:	00 00       	nop
uint8_t spin_Bt_State(){
	static uint8_t prevState4 = 1; // static을 선언하면 전역변수처럼, 처음만 설정되고 다음부터는 기존 값을 그대로 사용한다.
	
	_delay_ms(10); // 채터링 예방
	
	if(((PIN_BUTTON & (0x01 << SPIN_BUTTON)) == 0) && (prevState4 == 1)){ // 버튼 close 이면서 prevState == 1 --> 버튼이 처음 눌린 상태
     162:	90 b3       	in	r25, 0x10	; 16
     164:	89 2f       	mov	r24, r25
     166:	80 74       	andi	r24, 0x40	; 64
     168:	96 fd       	sbrc	r25, 6
     16a:	07 c0       	rjmp	.+14     	; 0x17a <spin_Bt_State+0x24>
     16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prevState4.2238>
     170:	91 30       	cpi	r25, 0x01	; 1
     172:	19 f4       	brne	.+6      	; 0x17a <spin_Bt_State+0x24>
		prevState4 = 0;
     174:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <prevState4.2238>
		return 0;
     178:	08 95       	ret
	}
	else if (((PIN_BUTTON & (0x01 << SPIN_BUTTON)) == (0x01 << SPIN_BUTTON)) && (prevState4 == 0)){ // 버튼이 open 이면서 prevState == 0 --> 버튼이 처음 눌렸다가 떼졌을 때
     17a:	90 b3       	in	r25, 0x10	; 16
     17c:	89 2f       	mov	r24, r25
     17e:	80 74       	andi	r24, 0x40	; 64
     180:	96 ff       	sbrs	r25, 6
     182:	09 c0       	rjmp	.+18     	; 0x196 <spin_Bt_State+0x40>
     184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <prevState4.2238>
     188:	81 11       	cpse	r24, r1
     18a:	04 c0       	rjmp	.+8      	; 0x194 <spin_Bt_State+0x3e>
		prevState4 = 1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <prevState4.2238>
		return 1;
     192:	08 95       	ret
	}
	return 0;
     194:	80 e0       	ldi	r24, 0x00	; 0
}
     196:	08 95       	ret

00000198 <reserv_Bt_State>:
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9c e9       	ldi	r25, 0x9C	; 156
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <reserv_Bt_State+0x4>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <reserv_Bt_State+0xa>
     1a2:	00 00       	nop
uint8_t reserv_Bt_State(){
	static uint8_t prevState5 = 1; // static을 선언하면 전역변수처럼, 처음만 설정되고 다음부터는 기존 값을 그대로 사용한다.
	
	_delay_ms(10); // 채터링 예방
	
	if(((PIN_BUTTON & (0x01 << RESERV_BUTTON)) == 0) && (prevState5 == 1)){ // 버튼 close 이면서 prevState == 1 --> 버튼이 처음 눌린 상태
     1a4:	90 b3       	in	r25, 0x10	; 16
     1a6:	89 2f       	mov	r24, r25
     1a8:	84 70       	andi	r24, 0x04	; 4
     1aa:	92 fd       	sbrc	r25, 2
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <reserv_Bt_State+0x24>
     1ae:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     1b2:	91 30       	cpi	r25, 0x01	; 1
     1b4:	19 f4       	brne	.+6      	; 0x1bc <reserv_Bt_State+0x24>
		prevState5 = 0;
     1b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		return 0;
     1ba:	08 95       	ret
	}
	else if (((PIN_BUTTON & (0x01 << RESERV_BUTTON)) == (0x01 << RESERV_BUTTON)) && (prevState5 == 0)){ // 버튼이 open 이면서 prevState == 0 --> 버튼이 처음 눌렸다가 떼졌을 때
     1bc:	90 b3       	in	r25, 0x10	; 16
     1be:	89 2f       	mov	r24, r25
     1c0:	84 70       	andi	r24, 0x04	; 4
     1c2:	92 ff       	sbrs	r25, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <reserv_Bt_State+0x40>
     1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1ca:	81 11       	cpse	r24, r1
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <reserv_Bt_State+0x3e>
		prevState5 = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 1;
     1d4:	08 95       	ret
	}
	return 0;
     1d6:	80 e0       	ldi	r24, 0x00	; 0
}
     1d8:	08 95       	ret

000001da <buzzer_Init>:
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR1A = ocr_value;
     1da:	be 9a       	sbi	0x17, 6	; 23
     1dc:	8e b5       	in	r24, 0x2e	; 46
     1de:	82 60       	ori	r24, 0x02	; 2
     1e0:	8e bd       	out	0x2e, r24	; 46
     1e2:	8e b5       	in	r24, 0x2e	; 46
     1e4:	88 60       	ori	r24, 0x08	; 8
     1e6:	8e bd       	out	0x2e, r24	; 46
     1e8:	8e b5       	in	r24, 0x2e	; 46
     1ea:	8e bd       	out	0x2e, r24	; 46
     1ec:	8f b5       	in	r24, 0x2f	; 47
     1ee:	80 61       	ori	r24, 0x10	; 16
     1f0:	8f bd       	out	0x2f, r24	; 47
     1f2:	88 ee       	ldi	r24, 0xE8	; 232
     1f4:	93 e0       	ldi	r25, 0x03	; 3
     1f6:	9b bd       	out	0x2b, r25	; 43
     1f8:	8a bd       	out	0x2a, r24	; 42
     1fa:	08 95       	ret

000001fc <stopBuzzer>:
}

void stopBuzzer(){
	TCCR1A &= ~((1<<COM1B1) | (1<<COM1B0));
     1fc:	8f b5       	in	r24, 0x2f	; 47
     1fe:	8f 7c       	andi	r24, 0xCF	; 207
     200:	8f bd       	out	0x2f, r24	; 47
     202:	08 95       	ret

00000204 <playBuzzer>:
}

void playBuzzer(){
	TCCR1A |= (0<<COM1B1) | (1<<COM1B0);
     204:	8f b5       	in	r24, 0x2f	; 47
     206:	80 61       	ori	r24, 0x10	; 16
     208:	8f bd       	out	0x2f, r24	; 47
     20a:	08 95       	ret

0000020c <powerOnBuzzer>:
}

void powerOnBuzzer(){
	playBuzzer();
     20c:	fb df       	rcall	.-10     	; 0x204 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR1A = ocr_value;
     20e:	88 ee       	ldi	r24, 0xE8	; 232
     210:	9e e0       	ldi	r25, 0x0E	; 14
     212:	9b bd       	out	0x2b, r25	; 43
     214:	8a bd       	out	0x2a, r24	; 42
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	85 ea       	ldi	r24, 0xA5	; 165
     21a:	9e e0       	ldi	r25, 0x0E	; 14
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <powerOnBuzzer+0x10>
     224:	00 c0       	rjmp	.+0      	; 0x226 <powerOnBuzzer+0x1a>
     226:	00 00       	nop
     228:	86 ed       	ldi	r24, 0xD6	; 214
     22a:	9b e0       	ldi	r25, 0x0B	; 11
     22c:	9b bd       	out	0x2b, r25	; 43
     22e:	8a bd       	out	0x2a, r24	; 42
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	85 ea       	ldi	r24, 0xA5	; 165
     234:	9e e0       	ldi	r25, 0x0E	; 14
     236:	21 50       	subi	r18, 0x01	; 1
     238:	80 40       	sbci	r24, 0x00	; 0
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <powerOnBuzzer+0x2a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <powerOnBuzzer+0x34>
     240:	00 00       	nop
     242:	87 ef       	ldi	r24, 0xF7	; 247
     244:	99 e0       	ldi	r25, 0x09	; 9
     246:	9b bd       	out	0x2b, r25	; 43
     248:	8a bd       	out	0x2a, r24	; 42
     24a:	2f ef       	ldi	r18, 0xFF	; 255
     24c:	85 ea       	ldi	r24, 0xA5	; 165
     24e:	9e e0       	ldi	r25, 0x0E	; 14
     250:	21 50       	subi	r18, 0x01	; 1
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	90 40       	sbci	r25, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <powerOnBuzzer+0x44>
     258:	00 c0       	rjmp	.+0      	; 0x25a <powerOnBuzzer+0x4e>
     25a:	00 00       	nop
     25c:	88 e7       	ldi	r24, 0x78	; 120
     25e:	97 e0       	ldi	r25, 0x07	; 7
     260:	9b bd       	out	0x2b, r25	; 43
     262:	8a bd       	out	0x2a, r24	; 42
     264:	2f ef       	ldi	r18, 0xFF	; 255
     266:	85 ea       	ldi	r24, 0xA5	; 165
     268:	9e e0       	ldi	r25, 0x0E	; 14
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <powerOnBuzzer+0x5e>
     272:	00 c0       	rjmp	.+0      	; 0x274 <powerOnBuzzer+0x68>
	_delay_ms(300);
	setBuzzer(G4);
	_delay_ms(300);
	setBuzzer(C5);
	_delay_ms(300);
	stopBuzzer();
     274:	00 00       	nop
     276:	c2 cf       	rjmp	.-124    	; 0x1fc <stopBuzzer>
     278:	08 95       	ret

0000027a <powerOffBuzzer>:
}

void powerOffBuzzer(){
	playBuzzer();
     27a:	c4 df       	rcall	.-120    	; 0x204 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR1A = ocr_value;
     27c:	88 e7       	ldi	r24, 0x78	; 120
     27e:	97 e0       	ldi	r25, 0x07	; 7
     280:	9b bd       	out	0x2b, r25	; 43
     282:	8a bd       	out	0x2a, r24	; 42
     284:	2f ef       	ldi	r18, 0xFF	; 255
     286:	85 ea       	ldi	r24, 0xA5	; 165
     288:	9e e0       	ldi	r25, 0x0E	; 14
     28a:	21 50       	subi	r18, 0x01	; 1
     28c:	80 40       	sbci	r24, 0x00	; 0
     28e:	90 40       	sbci	r25, 0x00	; 0
     290:	e1 f7       	brne	.-8      	; 0x28a <powerOffBuzzer+0x10>
     292:	00 c0       	rjmp	.+0      	; 0x294 <powerOffBuzzer+0x1a>
     294:	00 00       	nop
     296:	87 ef       	ldi	r24, 0xF7	; 247
     298:	99 e0       	ldi	r25, 0x09	; 9
     29a:	9b bd       	out	0x2b, r25	; 43
     29c:	8a bd       	out	0x2a, r24	; 42
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	85 ea       	ldi	r24, 0xA5	; 165
     2a2:	9e e0       	ldi	r25, 0x0E	; 14
     2a4:	21 50       	subi	r18, 0x01	; 1
     2a6:	80 40       	sbci	r24, 0x00	; 0
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <powerOffBuzzer+0x2a>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <powerOffBuzzer+0x34>
     2ae:	00 00       	nop
     2b0:	86 ed       	ldi	r24, 0xD6	; 214
     2b2:	9b e0       	ldi	r25, 0x0B	; 11
     2b4:	9b bd       	out	0x2b, r25	; 43
     2b6:	8a bd       	out	0x2a, r24	; 42
     2b8:	2f ef       	ldi	r18, 0xFF	; 255
     2ba:	85 ea       	ldi	r24, 0xA5	; 165
     2bc:	9e e0       	ldi	r25, 0x0E	; 14
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	80 40       	sbci	r24, 0x00	; 0
     2c2:	90 40       	sbci	r25, 0x00	; 0
     2c4:	e1 f7       	brne	.-8      	; 0x2be <powerOffBuzzer+0x44>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <powerOffBuzzer+0x4e>
     2c8:	00 00       	nop
     2ca:	88 ee       	ldi	r24, 0xE8	; 232
     2cc:	9e e0       	ldi	r25, 0x0E	; 14
     2ce:	9b bd       	out	0x2b, r25	; 43
     2d0:	8a bd       	out	0x2a, r24	; 42
     2d2:	2f ef       	ldi	r18, 0xFF	; 255
     2d4:	85 ea       	ldi	r24, 0xA5	; 165
     2d6:	9e e0       	ldi	r25, 0x0E	; 14
     2d8:	21 50       	subi	r18, 0x01	; 1
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	90 40       	sbci	r25, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <powerOffBuzzer+0x5e>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <powerOffBuzzer+0x68>
	_delay_ms(300);
	setBuzzer(E4);
	_delay_ms(300);
	setBuzzer(C4);
	_delay_ms(300);
	stopBuzzer();
     2e2:	00 00       	nop
     2e4:	8b cf       	rjmp	.-234    	; 0x1fc <stopBuzzer>
     2e6:	08 95       	ret

000002e8 <buttonBuzzer>:
}

void buttonBuzzer(){
	playBuzzer();
     2e8:	8d df       	rcall	.-230    	; 0x204 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR1A = ocr_value;
     2ea:	88 e7       	ldi	r24, 0x78	; 120
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	9b bd       	out	0x2b, r25	; 43
     2f0:	8a bd       	out	0x2a, r24	; 42
     2f2:	2f ef       	ldi	r18, 0xFF	; 255
     2f4:	80 e7       	ldi	r24, 0x70	; 112
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <buttonBuzzer+0x10>
     300:	00 c0       	rjmp	.+0      	; 0x302 <buttonBuzzer+0x1a>
     302:	00 00       	nop
     304:	81 e3       	ldi	r24, 0x31	; 49
     306:	9b e0       	ldi	r25, 0x0B	; 11
     308:	9b bd       	out	0x2b, r25	; 43
     30a:	8a bd       	out	0x2a, r24	; 42
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	80 e7       	ldi	r24, 0x70	; 112
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <buttonBuzzer+0x2a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <buttonBuzzer+0x34>
	playBuzzer();
	setBuzzer(C5);
	_delay_ms(50);
	setBuzzer(F4);
	_delay_ms(50);
	stopBuzzer();
     31c:	00 00       	nop
     31e:	6e cf       	rjmp	.-292    	; 0x1fc <stopBuzzer>
     320:	08 95       	ret

00000322 <finishBuzzer>:
}

void finishBuzzer(){
     322:	cf 93       	push	r28
	playBuzzer();
     324:	6f df       	rcall	.-290    	; 0x204 <playBuzzer>
/ ex) 1kHz 출력 : setSound(1000);
*/

void setBuzzer(int note){
	int ocr_value = 1000000 / note; // == ( F_CPU / 2 / PRESCALER / note )
	OCR1A = ocr_value;
     326:	87 ef       	ldi	r24, 0xF7	; 247
     328:	99 e0       	ldi	r25, 0x09	; 9
     32a:	9b bd       	out	0x2b, r25	; 43
     32c:	8a bd       	out	0x2a, r24	; 42
     32e:	2f ef       	ldi	r18, 0xFF	; 255
     330:	33 ec       	ldi	r19, 0xC3	; 195
     332:	49 e0       	ldi	r20, 0x09	; 9
     334:	21 50       	subi	r18, 0x01	; 1
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	e1 f7       	brne	.-8      	; 0x334 <finishBuzzer+0x12>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <finishBuzzer+0x1c>
     33e:	00 00       	nop
     340:	28 e7       	ldi	r18, 0x78	; 120
     342:	37 e0       	ldi	r19, 0x07	; 7
     344:	3b bd       	out	0x2b, r19	; 43
     346:	2a bd       	out	0x2a, r18	; 42
     348:	5f ef       	ldi	r21, 0xFF	; 255
     34a:	63 ec       	ldi	r22, 0xC3	; 195
     34c:	79 e0       	ldi	r23, 0x09	; 9
     34e:	51 50       	subi	r21, 0x01	; 1
     350:	60 40       	sbci	r22, 0x00	; 0
     352:	70 40       	sbci	r23, 0x00	; 0
     354:	e1 f7       	brne	.-8      	; 0x34e <finishBuzzer+0x2c>
     356:	00 c0       	rjmp	.+0      	; 0x358 <finishBuzzer+0x36>
     358:	00 00       	nop
     35a:	3b bd       	out	0x2b, r19	; 43
     35c:	2a bd       	out	0x2a, r18	; 42
     35e:	af ef       	ldi	r26, 0xFF	; 255
     360:	b3 ec       	ldi	r27, 0xC3	; 195
     362:	c9 e0       	ldi	r28, 0x09	; 9
     364:	a1 50       	subi	r26, 0x01	; 1
     366:	b0 40       	sbci	r27, 0x00	; 0
     368:	c0 40       	sbci	r28, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <finishBuzzer+0x42>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <finishBuzzer+0x4c>
     36e:	00 00       	nop
     370:	4d ee       	ldi	r20, 0xED	; 237
     372:	55 e0       	ldi	r21, 0x05	; 5
     374:	5b bd       	out	0x2b, r21	; 43
     376:	4a bd       	out	0x2a, r20	; 42
     378:	ef ef       	ldi	r30, 0xFF	; 255
     37a:	f3 ec       	ldi	r31, 0xC3	; 195
     37c:	69 e0       	ldi	r22, 0x09	; 9
     37e:	e1 50       	subi	r30, 0x01	; 1
     380:	f0 40       	sbci	r31, 0x00	; 0
     382:	60 40       	sbci	r22, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <finishBuzzer+0x5c>
     386:	00 c0       	rjmp	.+0      	; 0x388 <finishBuzzer+0x66>
     388:	00 00       	nop
     38a:	5b bd       	out	0x2b, r21	; 43
     38c:	4a bd       	out	0x2a, r20	; 42
     38e:	7f ef       	ldi	r23, 0xFF	; 255
     390:	a3 ec       	ldi	r26, 0xC3	; 195
     392:	b9 e0       	ldi	r27, 0x09	; 9
     394:	71 50       	subi	r23, 0x01	; 1
     396:	a0 40       	sbci	r26, 0x00	; 0
     398:	b0 40       	sbci	r27, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <finishBuzzer+0x72>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <finishBuzzer+0x7c>
     39e:	00 00       	nop
     3a0:	3b bd       	out	0x2b, r19	; 43
     3a2:	2a bd       	out	0x2a, r18	; 42
     3a4:	cf ef       	ldi	r28, 0xFF	; 255
     3a6:	e6 e1       	ldi	r30, 0x16	; 22
     3a8:	f1 e1       	ldi	r31, 0x11	; 17
     3aa:	c1 50       	subi	r28, 0x01	; 1
     3ac:	e0 40       	sbci	r30, 0x00	; 0
     3ae:	f0 40       	sbci	r31, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <finishBuzzer+0x88>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <finishBuzzer+0x92>
     3b4:	00 00       	nop
     3b6:	9b bd       	out	0x2b, r25	; 43
     3b8:	8a bd       	out	0x2a, r24	; 42
     3ba:	6f ef       	ldi	r22, 0xFF	; 255
     3bc:	73 ec       	ldi	r23, 0xC3	; 195
     3be:	a9 e0       	ldi	r26, 0x09	; 9
     3c0:	61 50       	subi	r22, 0x01	; 1
     3c2:	70 40       	sbci	r23, 0x00	; 0
     3c4:	a0 40       	sbci	r26, 0x00	; 0
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <finishBuzzer+0x9e>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <finishBuzzer+0xa8>
     3ca:	00 00       	nop
     3cc:	9b bd       	out	0x2b, r25	; 43
     3ce:	8a bd       	out	0x2a, r24	; 42
     3d0:	bf ef       	ldi	r27, 0xFF	; 255
     3d2:	c3 ec       	ldi	r28, 0xC3	; 195
     3d4:	e9 e0       	ldi	r30, 0x09	; 9
     3d6:	b1 50       	subi	r27, 0x01	; 1
     3d8:	c0 40       	sbci	r28, 0x00	; 0
     3da:	e0 40       	sbci	r30, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <finishBuzzer+0xb4>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <finishBuzzer+0xbe>
     3e0:	00 00       	nop
     3e2:	9b bd       	out	0x2b, r25	; 43
     3e4:	8a bd       	out	0x2a, r24	; 42
     3e6:	ff ef       	ldi	r31, 0xFF	; 255
     3e8:	66 e1       	ldi	r22, 0x16	; 22
     3ea:	71 e1       	ldi	r23, 0x11	; 17
     3ec:	f1 50       	subi	r31, 0x01	; 1
     3ee:	60 40       	sbci	r22, 0x00	; 0
     3f0:	70 40       	sbci	r23, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <finishBuzzer+0xca>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <finishBuzzer+0xd4>
     3f6:	00 00       	nop
     3f8:	9b bd       	out	0x2b, r25	; 43
     3fa:	8a bd       	out	0x2a, r24	; 42
     3fc:	af ef       	ldi	r26, 0xFF	; 255
     3fe:	b3 ec       	ldi	r27, 0xC3	; 195
     400:	c9 e0       	ldi	r28, 0x09	; 9
     402:	a1 50       	subi	r26, 0x01	; 1
     404:	b0 40       	sbci	r27, 0x00	; 0
     406:	c0 40       	sbci	r28, 0x00	; 0
     408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	60 e7       	ldi	r22, 0x70	; 112
     410:	74 e0       	ldi	r23, 0x04	; 4
     412:	7b bd       	out	0x2b, r23	; 43
     414:	6a bd       	out	0x2a, r22	; 42
     416:	ef ef       	ldi	r30, 0xFF	; 255
     418:	f3 ec       	ldi	r31, 0xC3	; 195
     41a:	69 e0       	ldi	r22, 0x09	; 9
     41c:	e1 50       	subi	r30, 0x01	; 1
     41e:	f0 40       	sbci	r31, 0x00	; 0
     420:	60 40       	sbci	r22, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     426:	00 00       	nop
     428:	3b bd       	out	0x2b, r19	; 43
     42a:	2a bd       	out	0x2a, r18	; 42
     42c:	7f ef       	ldi	r23, 0xFF	; 255
     42e:	a3 ec       	ldi	r26, 0xC3	; 195
     430:	b9 e0       	ldi	r27, 0x09	; 9
     432:	71 50       	subi	r23, 0x01	; 1
     434:	a0 40       	sbci	r26, 0x00	; 0
     436:	b0 40       	sbci	r27, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43c:	00 00       	nop
     43e:	68 ee       	ldi	r22, 0xE8	; 232
     440:	77 e0       	ldi	r23, 0x07	; 7
     442:	7b bd       	out	0x2b, r23	; 43
     444:	6a bd       	out	0x2a, r22	; 42
     446:	cf ef       	ldi	r28, 0xFF	; 255
     448:	e3 ec       	ldi	r30, 0xC3	; 195
     44a:	f9 e0       	ldi	r31, 0x09	; 9
     44c:	c1 50       	subi	r28, 0x01	; 1
     44e:	e0 40       	sbci	r30, 0x00	; 0
     450:	f0 40       	sbci	r31, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     456:	00 00       	nop
     458:	e0 ee       	ldi	r30, 0xE0	; 224
     45a:	f8 e0       	ldi	r31, 0x08	; 8
     45c:	fb bd       	out	0x2b, r31	; 43
     45e:	ea bd       	out	0x2a, r30	; 42
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	b3 ec       	ldi	r27, 0xC3	; 195
     464:	c9 e0       	ldi	r28, 0x09	; 9
     466:	a1 50       	subi	r26, 0x01	; 1
     468:	b0 40       	sbci	r27, 0x00	; 0
     46a:	c0 40       	sbci	r28, 0x00	; 0
     46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	9b bd       	out	0x2b, r25	; 43
     474:	8a bd       	out	0x2a, r24	; 42
     476:	af ef       	ldi	r26, 0xFF	; 255
     478:	b6 e1       	ldi	r27, 0x16	; 22
     47a:	c1 e1       	ldi	r28, 0x11	; 17
     47c:	a1 50       	subi	r26, 0x01	; 1
     47e:	b0 40       	sbci	r27, 0x00	; 0
     480:	c0 40       	sbci	r28, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     484:	00 c0       	rjmp	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     486:	00 00       	nop
     488:	9b bd       	out	0x2b, r25	; 43
     48a:	8a bd       	out	0x2a, r24	; 42
     48c:	af ef       	ldi	r26, 0xFF	; 255
     48e:	b3 ec       	ldi	r27, 0xC3	; 195
     490:	c9 e0       	ldi	r28, 0x09	; 9
     492:	a1 50       	subi	r26, 0x01	; 1
     494:	b0 40       	sbci	r27, 0x00	; 0
     496:	c0 40       	sbci	r28, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49c:	00 00       	nop
     49e:	3b bd       	out	0x2b, r19	; 43
     4a0:	2a bd       	out	0x2a, r18	; 42
     4a2:	af ef       	ldi	r26, 0xFF	; 255
     4a4:	b3 ec       	ldi	r27, 0xC3	; 195
     4a6:	c9 e0       	ldi	r28, 0x09	; 9
     4a8:	a1 50       	subi	r26, 0x01	; 1
     4aa:	b0 40       	sbci	r27, 0x00	; 0
     4ac:	c0 40       	sbci	r28, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
     4b4:	3b bd       	out	0x2b, r19	; 43
     4b6:	2a bd       	out	0x2a, r18	; 42
     4b8:	af ef       	ldi	r26, 0xFF	; 255
     4ba:	b3 ec       	ldi	r27, 0xC3	; 195
     4bc:	c9 e0       	ldi	r28, 0x09	; 9
     4be:	a1 50       	subi	r26, 0x01	; 1
     4c0:	b0 40       	sbci	r27, 0x00	; 0
     4c2:	c0 40       	sbci	r28, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c8:	00 00       	nop
     4ca:	5b bd       	out	0x2b, r21	; 43
     4cc:	4a bd       	out	0x2a, r20	; 42
     4ce:	af ef       	ldi	r26, 0xFF	; 255
     4d0:	b3 ec       	ldi	r27, 0xC3	; 195
     4d2:	c9 e0       	ldi	r28, 0x09	; 9
     4d4:	a1 50       	subi	r26, 0x01	; 1
     4d6:	b0 40       	sbci	r27, 0x00	; 0
     4d8:	c0 40       	sbci	r28, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4de:	00 00       	nop
     4e0:	5b bd       	out	0x2b, r21	; 43
     4e2:	4a bd       	out	0x2a, r20	; 42
     4e4:	4f ef       	ldi	r20, 0xFF	; 255
     4e6:	53 ec       	ldi	r21, 0xC3	; 195
     4e8:	a9 e0       	ldi	r26, 0x09	; 9
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	50 40       	sbci	r21, 0x00	; 0
     4ee:	a0 40       	sbci	r26, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f4:	00 00       	nop
     4f6:	3b bd       	out	0x2b, r19	; 43
     4f8:	2a bd       	out	0x2a, r18	; 42
     4fa:	bf ef       	ldi	r27, 0xFF	; 255
     4fc:	c6 e1       	ldi	r28, 0x16	; 22
     4fe:	41 e1       	ldi	r20, 0x11	; 17
     500:	b1 50       	subi	r27, 0x01	; 1
     502:	c0 40       	sbci	r28, 0x00	; 0
     504:	40 40       	sbci	r20, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     50a:	00 00       	nop
     50c:	9b bd       	out	0x2b, r25	; 43
     50e:	8a bd       	out	0x2a, r24	; 42
     510:	5f ef       	ldi	r21, 0xFF	; 255
     512:	a3 ec       	ldi	r26, 0xC3	; 195
     514:	b9 e0       	ldi	r27, 0x09	; 9
     516:	51 50       	subi	r21, 0x01	; 1
     518:	a0 40       	sbci	r26, 0x00	; 0
     51a:	b0 40       	sbci	r27, 0x00	; 0
     51c:	e1 f7       	brne	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     520:	00 00       	nop
     522:	3b bd       	out	0x2b, r19	; 43
     524:	2a bd       	out	0x2a, r18	; 42
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	43 ec       	ldi	r20, 0xC3	; 195
     52a:	59 e0       	ldi	r21, 0x09	; 9
     52c:	c1 50       	subi	r28, 0x01	; 1
     52e:	40 40       	sbci	r20, 0x00	; 0
     530:	50 40       	sbci	r21, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	00 c0       	rjmp	.+0      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     536:	00 00       	nop
     538:	7b bd       	out	0x2b, r23	; 43
     53a:	6a bd       	out	0x2a, r22	; 42
     53c:	af ef       	ldi	r26, 0xFF	; 255
     53e:	b5 ea       	ldi	r27, 0xA5	; 165
     540:	ce e0       	ldi	r28, 0x0E	; 14
     542:	a1 50       	subi	r26, 0x01	; 1
     544:	b0 40       	sbci	r27, 0x00	; 0
     546:	c0 40       	sbci	r28, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     54c:	00 00       	nop
     54e:	fb bd       	out	0x2b, r31	; 43
     550:	ea bd       	out	0x2a, r30	; 42
     552:	ef ef       	ldi	r30, 0xFF	; 255
     554:	f3 ec       	ldi	r31, 0xC3	; 195
     556:	49 e0       	ldi	r20, 0x09	; 9
     558:	e1 50       	subi	r30, 0x01	; 1
     55a:	f0 40       	sbci	r31, 0x00	; 0
     55c:	40 40       	sbci	r20, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     560:	00 c0       	rjmp	.+0      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     562:	00 00       	nop
     564:	7b bd       	out	0x2b, r23	; 43
     566:	6a bd       	out	0x2a, r22	; 42
     568:	5f ef       	ldi	r21, 0xFF	; 255
     56a:	63 ec       	ldi	r22, 0xC3	; 195
     56c:	79 e0       	ldi	r23, 0x09	; 9
     56e:	51 50       	subi	r21, 0x01	; 1
     570:	60 40       	sbci	r22, 0x00	; 0
     572:	70 40       	sbci	r23, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     576:	00 c0       	rjmp	.+0      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     578:	00 00       	nop
     57a:	3b bd       	out	0x2b, r19	; 43
     57c:	2a bd       	out	0x2a, r18	; 42
     57e:	af ef       	ldi	r26, 0xFF	; 255
     580:	b5 ea       	ldi	r27, 0xA5	; 165
     582:	ce e0       	ldi	r28, 0x0E	; 14
     584:	a1 50       	subi	r26, 0x01	; 1
     586:	b0 40       	sbci	r27, 0x00	; 0
     588:	c0 40       	sbci	r28, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58e:	00 00       	nop
     590:	2e e8       	ldi	r18, 0x8E	; 142
     592:	3a e0       	ldi	r19, 0x0A	; 10
     594:	3b bd       	out	0x2b, r19	; 43
     596:	2a bd       	out	0x2a, r18	; 42
     598:	ef ef       	ldi	r30, 0xFF	; 255
     59a:	f3 ec       	ldi	r31, 0xC3	; 195
     59c:	29 e0       	ldi	r18, 0x09	; 9
     59e:	e1 50       	subi	r30, 0x01	; 1
     5a0:	f0 40       	sbci	r31, 0x00	; 0
     5a2:	20 40       	sbci	r18, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a8:	00 00       	nop
     5aa:	9b bd       	out	0x2b, r25	; 43
     5ac:	8a bd       	out	0x2a, r24	; 42
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
     5b0:	46 e1       	ldi	r20, 0x16	; 22
     5b2:	51 e1       	ldi	r21, 0x11	; 17
     5b4:	31 50       	subi	r19, 0x01	; 1
     5b6:	40 40       	sbci	r20, 0x00	; 0
     5b8:	50 40       	sbci	r21, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
	
	setBuzzer(F4S);
	_delay_ms(200);
	setBuzzer(G4);
	_delay_ms(350);
	stopBuzzer();
     5be:	00 00       	nop
     5c0:	1d de       	rcall	.-966    	; 0x1fc <stopBuzzer>
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <DC_Motor_Init>:
	
	if(_anticlockspeed > 255) _anticlockspeed = 255;
	else if(_anticlockspeed < 0) _anticlockspeed = 0;
	
	MOTOR_ANTICLOCK = _anticlockspeed;
	MOTOR_CLOCK = _clockspeed;
     5c6:	82 b1       	in	r24, 0x02	; 2
     5c8:	88 61       	ori	r24, 0x18	; 24
     5ca:	82 b9       	out	0x02, r24	; 2
     5cc:	eb e8       	ldi	r30, 0x8B	; 139
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 83       	st	Z, r24
     5d6:	aa e8       	ldi	r26, 0x8A	; 138
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	8c 91       	ld	r24, X
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	8c 93       	st	X, r24
     5e0:	8c 91       	ld	r24, X
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	8c 93       	st	X, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	80 6a       	ori	r24, 0xA0	; 160
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret

000005ee <DCMotorStop>:
     5ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     5f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     5f6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5fa:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5fe:	08 95       	ret

00000600 <DCMotor_Washmode>:
	// 좌,우 번갈아가며 돌아야함
	static uint8_t clockwise = 0, anticlockwise = MOTOR_SPEED;
	static uint8_t count = 0;
	
	// 5초 단위가 되었을 때 그 1초 동안 방향이 계속 바뀌는 것을 방지하기 위해
	if(((_timer % 5) - 1) == 0){ // 5초 단위에서 1초 전에
     600:	9d ec       	ldi	r25, 0xCD	; 205
     602:	89 9f       	mul	r24, r25
     604:	91 2d       	mov	r25, r1
     606:	11 24       	eor	r1, r1
     608:	96 95       	lsr	r25
     60a:	96 95       	lsr	r25
     60c:	29 2f       	mov	r18, r25
     60e:	22 0f       	add	r18, r18
     610:	22 0f       	add	r18, r18
     612:	92 0f       	add	r25, r18
     614:	89 1b       	sub	r24, r25
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	19 f4       	brne	.+6      	; 0x620 <DCMotor_Washmode+0x20>
		count = 0; // count를 0으로 바꿔줘서 조건문에 들어갈 수 있게 한다
     61a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <count.2244>
     61e:	23 c0       	rjmp	.+70     	; 0x666 <DCMotor_Washmode+0x66>
	}
	
	if(((_timer % 5) == 0) && (clockwise == 0) && (count == 0)){
     620:	81 11       	cpse	r24, r1
     622:	21 c0       	rjmp	.+66     	; 0x666 <DCMotor_Washmode+0x66>
     624:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <clockwise.2242>
     628:	81 11       	cpse	r24, r1
     62a:	0d c0       	rjmp	.+26     	; 0x646 <DCMotor_Washmode+0x46>
     62c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <count.2244>
     630:	81 11       	cpse	r24, r1
     632:	19 c0       	rjmp	.+50     	; 0x666 <DCMotor_Washmode+0x66>
		clockwise = MOTOR_SPEED;
     634:	84 e6       	ldi	r24, 0x64	; 100
     636:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <clockwise.2242>
		anticlockwise = 0;
     63a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <anticlockwise.2243>
		count = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <count.2244>
     644:	10 c0       	rjmp	.+32     	; 0x666 <DCMotor_Washmode+0x66>
	}
	else if(((_timer % 5) == 0) && (anticlockwise == 0) && (count == 0)){
     646:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <anticlockwise.2243>
     64a:	81 11       	cpse	r24, r1
     64c:	0c c0       	rjmp	.+24     	; 0x666 <DCMotor_Washmode+0x66>
     64e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <count.2244>
     652:	81 11       	cpse	r24, r1
     654:	08 c0       	rjmp	.+16     	; 0x666 <DCMotor_Washmode+0x66>
		clockwise = 0;
     656:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <clockwise.2242>
		anticlockwise = MOTOR_SPEED;
     65a:	84 e6       	ldi	r24, 0x64	; 100
     65c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <anticlockwise.2243>
		count = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <count.2244>
	}
	DCMotor_Spin(clockwise, anticlockwise);
     666:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <clockwise.2242>
	else if(_clockspeed < 0) _clockspeed = 0;
	
	if(_anticlockspeed > 255) _anticlockspeed = 255;
	else if(_anticlockspeed < 0) _anticlockspeed = 0;
	
	MOTOR_ANTICLOCK = _anticlockspeed;
     66a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <anticlockwise.2243>
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     674:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	MOTOR_CLOCK = _clockspeed;
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     67e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     682:	08 95       	ret

00000684 <DCMotor_Rinsemode>:
	// 좌,우 번갈아가며 돌아야함
	static uint8_t clockwise = 0, anticlockwise = MOTOR_SPEED;
	static uint8_t count = 0;
	
	// 5초 단위가 되었을 때 그 1초 동안 방향이 계속 바뀌는 것을 방지하기 위해
	if(((_timer % 5) - 1) == 0){ // 5초 단위에서 1초 전에
     684:	9d ec       	ldi	r25, 0xCD	; 205
     686:	89 9f       	mul	r24, r25
     688:	91 2d       	mov	r25, r1
     68a:	11 24       	eor	r1, r1
     68c:	96 95       	lsr	r25
     68e:	96 95       	lsr	r25
     690:	29 2f       	mov	r18, r25
     692:	22 0f       	add	r18, r18
     694:	22 0f       	add	r18, r18
     696:	92 0f       	add	r25, r18
     698:	89 1b       	sub	r24, r25
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	19 f4       	brne	.+6      	; 0x6a4 <DCMotor_Rinsemode+0x20>
		count = 0; // count를 0으로 바꿔줘서 조건문에 들어갈 수 있게 한다
     69e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <count.2250>
     6a2:	35 c0       	rjmp	.+106    	; 0x70e <DCMotor_Rinsemode+0x8a>
	}
	
	if(((_timer % 5) == 0) && (clockwise == 0) && (count == 0)){
     6a4:	81 11       	cpse	r24, r1
     6a6:	33 c0       	rjmp	.+102    	; 0x70e <DCMotor_Rinsemode+0x8a>
     6a8:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <__data_end>
     6ac:	81 11       	cpse	r24, r1
     6ae:	16 c0       	rjmp	.+44     	; 0x6dc <DCMotor_Rinsemode+0x58>
     6b0:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <count.2250>
     6b4:	81 11       	cpse	r24, r1
     6b6:	2b c0       	rjmp	.+86     	; 0x70e <DCMotor_Rinsemode+0x8a>
		clockwise = MOTOR_SPEED;
     6b8:	84 e6       	ldi	r24, 0x64	; 100
     6ba:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__data_end>
		anticlockwise = 0;
     6be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <anticlockwise.2249>
		count = 1;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <count.2250>
     6c8:	2f ef       	ldi	r18, 0xFF	; 255
     6ca:	83 ed       	ldi	r24, 0xD3	; 211
     6cc:	90 e3       	ldi	r25, 0x30	; 48
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <DCMotor_Rinsemode+0x4a>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <DCMotor_Rinsemode+0x54>
     6d8:	00 00       	nop
     6da:	19 c0       	rjmp	.+50     	; 0x70e <DCMotor_Rinsemode+0x8a>
		_delay_ms(1000);
	}
	else if(((_timer % 5) == 0) && (anticlockwise == 0) && (count == 0)){
     6dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <anticlockwise.2249>
     6e0:	81 11       	cpse	r24, r1
     6e2:	15 c0       	rjmp	.+42     	; 0x70e <DCMotor_Rinsemode+0x8a>
     6e4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <count.2250>
     6e8:	81 11       	cpse	r24, r1
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <DCMotor_Rinsemode+0x8a>
		clockwise = 0;
     6ec:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__data_end>
		anticlockwise = MOTOR_SPEED;
     6f0:	84 e6       	ldi	r24, 0x64	; 100
     6f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <anticlockwise.2249>
		count = 1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <count.2250>
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	83 ed       	ldi	r24, 0xD3	; 211
     700:	90 e3       	ldi	r25, 0x30	; 48
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <DCMotor_Rinsemode+0x7e>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <DCMotor_Rinsemode+0x88>
     70c:	00 00       	nop
		_delay_ms(1000);
	}
	DCMotor_Spin(clockwise, anticlockwise);
     70e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <__data_end>
	else if(_clockspeed < 0) _clockspeed = 0;
	
	if(_anticlockspeed > 255) _anticlockspeed = 255;
	else if(_anticlockspeed < 0) _anticlockspeed = 0;
	
	MOTOR_ANTICLOCK = _anticlockspeed;
     712:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <anticlockwise.2249>
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     71c:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	MOTOR_CLOCK = _clockspeed;
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     726:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     72a:	08 95       	ret

0000072c <DCMotor_Spinmode>:
	else if(_clockspeed < 0) _clockspeed = 0;
	
	if(_anticlockspeed > 255) _anticlockspeed = 255;
	else if(_anticlockspeed < 0) _anticlockspeed = 0;
	
	MOTOR_ANTICLOCK = _anticlockspeed;
     72c:	88 ec       	ldi	r24, 0xC8	; 200
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     734:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	MOTOR_CLOCK = _clockspeed;
     738:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     73c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     740:	08 95       	ret

00000742 <DS1302_Init>:
void DS1302_WriteData(uint8_t address, uint8_t data){
	DS1302_Selected();	// CE 활성화
	DS1302_TxData(address);	// 주소를 보내고
	DS1302_TxData(decimal_to_bcd(data));	// 보내는 포멧이 bcd 이기 때문
	DS1302_Deselected();	// CE 비활성화
}
     742:	a0 9a       	sbi	0x14, 0	; 20
     744:	a1 9a       	sbi	0x14, 1	; 20
     746:	a2 9a       	sbi	0x14, 2	; 20
     748:	08 95       	ret

0000074a <DS1302_Selected>:
     74a:	aa 9a       	sbi	0x15, 2	; 21
     74c:	08 95       	ret

0000074e <DS1302_Deselected>:
     74e:	aa 98       	cbi	0x15, 2	; 21
     750:	08 95       	ret

00000752 <DS1302_Clock>:
     752:	a8 98       	cbi	0x15, 0	; 21
     754:	a8 9a       	sbi	0x15, 0	; 21
     756:	a8 98       	cbi	0x15, 0	; 21
     758:	08 95       	ret

0000075a <DS1302_DataBitSet>:
     75a:	a9 9a       	sbi	0x15, 1	; 21
     75c:	08 95       	ret

0000075e <DS1302_DataBitReset>:
     75e:	a9 98       	cbi	0x15, 1	; 21
     760:	08 95       	ret

00000762 <DS1302_Change_ReadMode>:
     762:	a1 98       	cbi	0x14, 1	; 20
     764:	08 95       	ret

00000766 <DS1302_Change_WriteMode>:
     766:	a1 9a       	sbi	0x14, 1	; 20
     768:	08 95       	ret

0000076a <bcd_to_decimal>:
     76a:	98 2f       	mov	r25, r24
     76c:	92 95       	swap	r25
     76e:	9f 70       	andi	r25, 0x0F	; 15
     770:	99 0f       	add	r25, r25
     772:	29 2f       	mov	r18, r25
     774:	22 0f       	add	r18, r18
     776:	22 0f       	add	r18, r18
     778:	92 0f       	add	r25, r18
     77a:	8f 70       	andi	r24, 0x0F	; 15
     77c:	89 0f       	add	r24, r25
     77e:	08 95       	ret

00000780 <DS1302_TxData>:
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	08 2f       	mov	r16, r24
     78a:	ed df       	rcall	.-38     	; 0x766 <DS1302_Change_WriteMode>
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	98 01       	movw	r18, r16
     794:	0c 2e       	mov	r0, r28
     796:	02 c0       	rjmp	.+4      	; 0x79c <DS1302_TxData+0x1c>
     798:	35 95       	asr	r19
     79a:	27 95       	ror	r18
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <DS1302_TxData+0x18>
     7a0:	20 ff       	sbrs	r18, 0
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DS1302_TxData+0x28>
     7a4:	da df       	rcall	.-76     	; 0x75a <DS1302_DataBitSet>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <DS1302_TxData+0x2a>
     7a8:	da df       	rcall	.-76     	; 0x75e <DS1302_DataBitReset>
     7aa:	d3 df       	rcall	.-90     	; 0x752 <DS1302_Clock>
     7ac:	21 96       	adiw	r28, 0x01	; 1
     7ae:	c8 30       	cpi	r28, 0x08	; 8
     7b0:	d1 05       	cpc	r29, r1
     7b2:	79 f7       	brne	.-34     	; 0x792 <DS1302_TxData+0x12>
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <DS1302_RxData>:
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ca df       	rcall	.-108    	; 0x762 <DS1302_Change_ReadMode>
     7ce:	c0 e0       	ldi	r28, 0x00	; 0
     7d0:	d0 e0       	ldi	r29, 0x00	; 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	d1 2c       	mov	r13, r1
     7d6:	00 e0       	ldi	r16, 0x00	; 0
     7d8:	ee 24       	eor	r14, r14
     7da:	e3 94       	inc	r14
     7dc:	f1 2c       	mov	r15, r1
     7de:	99 9b       	sbis	0x13, 1	; 19
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <DS1302_RxData+0x34>
     7e2:	c7 01       	movw	r24, r14
     7e4:	0c 2e       	mov	r0, r28
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DS1302_RxData+0x2e>
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	0a 94       	dec	r0
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DS1302_RxData+0x2a>
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <DS1302_RxData+0x36>
     7f2:	8d 2d       	mov	r24, r13
     7f4:	18 2b       	or	r17, r24
     7f6:	ad df       	rcall	.-166    	; 0x752 <DS1302_Clock>
     7f8:	21 96       	adiw	r28, 0x01	; 1
     7fa:	c8 30       	cpi	r28, 0x08	; 8
     7fc:	d1 05       	cpc	r29, r1
     7fe:	79 f7       	brne	.-34     	; 0x7de <DS1302_RxData+0x20>
     800:	81 2f       	mov	r24, r17
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	08 95       	ret

00000812 <DS1302_ReadData>:

uint8_t DS1302_ReadData(uint8_t address){
     812:	cf 93       	push	r28
     814:	c8 2f       	mov	r28, r24
	uint8_t rxData = 0;
	DS1302_Selected();
     816:	99 df       	rcall	.-206    	; 0x74a <DS1302_Selected>
	DS1302_TxData(address+1);	// 주소를 읽어오고 // read 주소가 write 주소보다 1 더 많기 때문에 +1
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	8c 0f       	add	r24, r28
	rxData = DS1302_RxData();
     81c:	b1 df       	rcall	.-158    	; 0x780 <DS1302_TxData>
     81e:	cf df       	rcall	.-98     	; 0x7be <DS1302_RxData>
	DS1302_Deselected();
     820:	c8 2f       	mov	r28, r24
     822:	95 df       	rcall	.-214    	; 0x74e <DS1302_Deselected>
	
	return bcd_to_decimal(rxData);	
     824:	8c 2f       	mov	r24, r28
     826:	a1 df       	rcall	.-190    	; 0x76a <bcd_to_decimal>
     828:	cf 91       	pop	r28
}
     82a:	08 95       	ret

0000082c <DS1302_GetTime>:
     82c:	cf 93       	push	r28
	
void DS1302_GetTime(DS1302 *timeData){
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
	timeData->seconds = DS1302_ReadData(ADDRESS_SECONDS); // datasheet 참고
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	ee df       	rcall	.-36     	; 0x812 <DS1302_ReadData>
     836:	88 83       	st	Y, r24
	timeData->minutes = DS1302_ReadData(ADDRESS_MINUTES);
     838:	82 e8       	ldi	r24, 0x82	; 130
     83a:	eb df       	rcall	.-42     	; 0x812 <DS1302_ReadData>
     83c:	89 83       	std	Y+1, r24	; 0x01
	timeData->hour = DS1302_ReadData(ADDRESS_HOUR);
     83e:	84 e8       	ldi	r24, 0x84	; 132
     840:	e8 df       	rcall	.-48     	; 0x812 <DS1302_ReadData>
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	df 91       	pop	r29
}
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <DS1302_GetDate>:
     84a:	cf 93       	push	r28

void DS1302_GetDate(DS1302 *dateData){
     84c:	df 93       	push	r29
     84e:	ec 01       	movw	r28, r24
	dateData->date = DS1302_ReadData(ADDRESS_DATE); // datasheet 참고
     850:	86 e8       	ldi	r24, 0x86	; 134
     852:	df df       	rcall	.-66     	; 0x812 <DS1302_ReadData>
     854:	8b 83       	std	Y+3, r24	; 0x03
	dateData->month = DS1302_ReadData(ADDRESS_MONTH);
     856:	88 e8       	ldi	r24, 0x88	; 136
     858:	dc df       	rcall	.-72     	; 0x812 <DS1302_ReadData>
     85a:	8c 83       	std	Y+4, r24	; 0x04
	dateData->dayofweek = DS1302_ReadData(ADDRESS_DAYOFWEEK);
     85c:	8a e8       	ldi	r24, 0x8A	; 138
     85e:	d9 df       	rcall	.-78     	; 0x812 <DS1302_ReadData>
     860:	8d 83       	std	Y+5, r24	; 0x05
	dateData->year = DS1302_ReadData(ADDRESS_YEAR);
     862:	8c e8       	ldi	r24, 0x8C	; 140
     864:	d6 df       	rcall	.-84     	; 0x812 <DS1302_ReadData>
     866:	8e 83       	std	Y+6, r24	; 0x06
     868:	df 91       	pop	r29
}
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <wash_switch>:
 */ 

#include "laundry.h"
#include "LED.h"

uint8_t wash_switch(uint8_t _washTime){
     86e:	cf 93       	push	r28
     870:	c8 2f       	mov	r28, r24
	wash_LED_switch();
     872:	a8 d0       	rcall	.+336    	; 0x9c4 <wash_LED_switch>
	_washTime++;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	8c 0f       	add	r24, r28
	if(_washTime > 3){
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	08 f0       	brcs	.+2      	; 0x87e <wash_switch+0x10>
		_washTime = 0;
     87c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return _washTime;
}
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <rinse_switch>:

uint8_t rinse_switch(uint8_t _rinseNum){
     882:	cf 93       	push	r28
     884:	c8 2f       	mov	r28, r24
	rinse_LED_switch();
     886:	c8 d0       	rcall	.+400    	; 0xa18 <rinse_LED_switch>
	_rinseNum++;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	8c 0f       	add	r24, r28
	if(_rinseNum > 3){
     88c:	84 30       	cpi	r24, 0x04	; 4
     88e:	08 f0       	brcs	.+2      	; 0x892 <rinse_switch+0x10>
		_rinseNum = 0;
     890:	80 e0       	ldi	r24, 0x00	; 0
	}
	return _rinseNum;
}
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <spin_switch>:

uint8_t spin_switch(uint8_t _spinTime){
     896:	cf 93       	push	r28
     898:	c8 2f       	mov	r28, r24
	spin_LED_switch();
     89a:	e8 d0       	rcall	.+464    	; 0xa6c <spin_LED_switch>
	_spinTime++;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	8c 0f       	add	r24, r28
	if(_spinTime > 3){
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <spin_switch+0x10>
		_spinTime = 0;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return _spinTime;
}
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <reserve_Mode>:

uint8_t reserve_Mode(uint8_t _reserveTime){
	_reserveTime++;
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
	if(_reserveTime > 3){
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <reserve_Mode+0x8>
		_reserveTime = 0;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return _reserveTime;
     8b2:	08 95       	ret

000008b4 <LCD_pulse_enable>:
 */ 

#include "lcd.h"

void LCD_pulse_enable(){			// 하강 에지에서 동작
	PORT_CONTROL |= (1 << E_PIN);	// E를 HIGH로
     8b4:	c3 9a       	sbi	0x18, 3	; 24
     8b6:	8f e9       	ldi	r24, 0x9F	; 159
     8b8:	9f e0       	ldi	r25, 0x0F	; 15
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <LCD_pulse_enable+0x6>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <LCD_pulse_enable+0xc>
     8c0:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(1 << E_PIN);	// E를 LOW로
     8c2:	c3 98       	cbi	0x18, 3	; 24
     8c4:	8f e9       	ldi	r24, 0x9F	; 159
     8c6:	9f e0       	ldi	r25, 0x0F	; 15
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <LCD_pulse_enable+0x14>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <LCD_pulse_enable+0x1a>
     8ce:	00 00       	nop
     8d0:	08 95       	ret

000008d2 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data){
	PORT_CONTROL |= (1 << RS_PIN);	// 문자 출력에서 RS는 1
     8d2:	c0 9a       	sbi	0x18, 0	; 24
	PORT_DATA = data;				// 출력할 문자 데이터
     8d4:	8b bb       	out	0x1b, r24	; 27
	LCD_pulse_enable();				// 문자 출력
     8d6:	ee df       	rcall	.-36     	; 0x8b4 <LCD_pulse_enable>
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	9f e1       	ldi	r25, 0x1F	; 31
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <LCD_write_data+0xa>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <LCD_write_data+0x10>
     8e2:	00 00       	nop
     8e4:	08 95       	ret

000008e6 <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command){
	PORT_CONTROL &= ~(1 << RS_PIN);	// 명령어 실행에서 RS는 0
     8e6:	c0 98       	cbi	0x18, 0	; 24
	PORT_DATA = command;			// 데이터 핀에 명령어 전달
     8e8:	8b bb       	out	0x1b, r24	; 27
	LCD_pulse_enable();				// 명령어 실행
     8ea:	e4 df       	rcall	.-56     	; 0x8b4 <LCD_pulse_enable>
     8ec:	8f e3       	ldi	r24, 0x3F	; 63
     8ee:	9f e1       	ldi	r25, 0x1F	; 31
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_write_command+0xa>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <LCD_write_command+0x10>
     8f6:	00 00       	nop
     8f8:	08 95       	ret

000008fa <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear(){
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	f4 df       	rcall	.-24     	; 0x8e6 <LCD_write_command>
     8fe:	8f e3       	ldi	r24, 0x3F	; 63
     900:	9f e1       	ldi	r25, 0x1F	; 31
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <LCD_clear+0x8>
     906:	00 c0       	rjmp	.+0      	; 0x908 <LCD_clear+0xe>
     908:	00 00       	nop
     90a:	08 95       	ret

0000090c <LCD_init>:
     90c:	2f ef       	ldi	r18, 0xFF	; 255
     90e:	80 e7       	ldi	r24, 0x70	; 112
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	21 50       	subi	r18, 0x01	; 1
     914:	80 40       	sbci	r24, 0x00	; 0
     916:	90 40       	sbci	r25, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <LCD_init+0x6>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <LCD_init+0x10>
     91c:	00 00       	nop

void LCD_init(){
	_delay_ms(50);					// 초기 구동시간
	
	// 연결 핀을 출력으로 설정
	DDR_DATA = 0xFF;
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	8a bb       	out	0x1a, r24	; 26
	PORT_DATA = 0x00;
     922:	1b ba       	out	0x1b, r1	; 27
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
     924:	87 b3       	in	r24, 0x17	; 23
     926:	8d 60       	ori	r24, 0x0D	; 13
     928:	87 bb       	out	0x17, r24	; 23
	
	// R/W 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1 << RW_PIN);
     92a:	c2 98       	cbi	0x18, 2	; 24
	
	LCD_write_command(COMMAND_8_BIT_MODE);	// 8비트 모드
     92c:	88 e3       	ldi	r24, 0x38	; 56
     92e:	db df       	rcall	.-74     	; 0x8e6 <LCD_write_command>
	
	// display on/off control
	// 화면 on, 커서 off, 커서 깜빡임 off
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
     930:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();			// 화면 지움
     932:	d9 df       	rcall	.-78     	; 0x8e6 <LCD_write_command>
	
	// Entry Mode Set
	// 출력 후 커서를 오른쪽으로 옮김, 즉 DDRAM의 주소가 증가하여 화면 이동은 없음
	LCD_write_command(0x06);
     934:	e2 df       	rcall	.-60     	; 0x8fa <LCD_clear>
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	d6 cf       	rjmp	.-84     	; 0x8e6 <LCD_write_command>
     93a:	08 95       	ret

0000093c <LCD_write_string>:
}

void LCD_write_string(char *string){
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i++)	// 종료 문자를 만날 때까지
     944:	80 81       	ld	r24, Z
     946:	88 23       	and	r24, r24
     948:	51 f0       	breq	.+20     	; 0x95e <LCD_write_string+0x22>
     94a:	8f 01       	movw	r16, r30
     94c:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_data(string[i]);	// 문자 단위 출력
     94e:	c1 df       	rcall	.-126    	; 0x8d2 <LCD_write_data>
	LCD_write_command(0x06);
}

void LCD_write_string(char *string){
	uint8_t i;
	for(i = 0; string[i]; i++)	// 종료 문자를 만날 때까지
     950:	cf 5f       	subi	r28, 0xFF	; 255
     952:	f8 01       	movw	r30, r16
     954:	ec 0f       	add	r30, r28
     956:	f1 1d       	adc	r31, r1
     958:	80 81       	ld	r24, Z
     95a:	81 11       	cpse	r24, r1
     95c:	f8 cf       	rjmp	.-16     	; 0x94e <LCD_write_string+0x12>
	LCD_write_data(string[i]);	// 문자 단위 출력
}
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <LCD_goto_XY>:
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);		// 커서 이동
     966:	81 70       	andi	r24, 0x01	; 1
     968:	6f 70       	andi	r22, 0x0F	; 15
     96a:	90 e4       	ldi	r25, 0x40	; 64
     96c:	89 9f       	mul	r24, r25
     96e:	60 0d       	add	r22, r0
     970:	11 24       	eor	r1, r1
     972:	86 2f       	mov	r24, r22
     974:	80 58       	subi	r24, 0x80	; 128
     976:	b7 cf       	rjmp	.-146    	; 0x8e6 <LCD_write_command>
     978:	08 95       	ret

0000097a <LCD_write_XY_string>:
}


// row, col, string 입력, LCD창에 출력
void LCD_write_XY_string(uint8_t row, uint8_t col, char *string){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ea 01       	movw	r28, r20
	LCD_goto_XY(row, col);
     980:	f2 df       	rcall	.-28     	; 0x966 <LCD_goto_XY>
	LCD_write_string(string);
     982:	ce 01       	movw	r24, r28
     984:	db df       	rcall	.-74     	; 0x93c <LCD_write_string>
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <led_Init>:
	PORTG &= (1 << PORTG1); // ALL LED OFF except power led, default led
}

void led_Off(){
	PORTF = 0x00;
	PORTG = 0x00;
     98c:	9f ef       	ldi	r25, 0xFF	; 255
     98e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     992:	87 e0       	ldi	r24, 0x07	; 7
     994:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     998:	a2 e6       	ldi	r26, 0x62	; 98
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	9c 93       	st	X, r25
     99e:	e5 e6       	ldi	r30, 0x65	; 101
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 83       	st	Z, r24
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
     9a6:	89 e6       	ldi	r24, 0x69	; 105
     9a8:	98 e1       	ldi	r25, 0x18	; 24
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	90 40       	sbci	r25, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <led_Init+0x1e>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <led_Init+0x28>
     9b4:	00 00       	nop
     9b6:	8c 91       	ld	r24, X
     9b8:	8a 72       	andi	r24, 0x2A	; 42
     9ba:	8c 93       	st	X, r24
     9bc:	80 81       	ld	r24, Z
     9be:	82 70       	andi	r24, 0x02	; 2
     9c0:	80 83       	st	Z, r24
     9c2:	08 95       	ret

000009c4 <wash_LED_switch>:
}

void wash_LED_switch(){
	uint8_t state = 0;
	
	if((PORTF & (1<<PORTF2)) == (1<<PORTF2)){
     9c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9c8:	82 ff       	sbrs	r24, 2
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <wash_LED_switch+0x1a>
		PORTF |= (1 << PORTF3);
     9cc:	e2 e6       	ldi	r30, 0x62	; 98
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	88 60       	ori	r24, 0x08	; 8
     9d4:	80 83       	st	Z, r24
		PORTF &= ~(1 << PORTF2);
     9d6:	80 81       	ld	r24, Z
     9d8:	8b 7f       	andi	r24, 0xFB	; 251
     9da:	80 83       	st	Z, r24
     9dc:	08 95       	ret
	}
	else if((PORTF & (1<<PORTF3)) == (1<<PORTF3)){
     9de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e2:	83 ff       	sbrs	r24, 3
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <wash_LED_switch+0x34>
		PORTF |= (1 << PORTF4);
     9e6:	e2 e6       	ldi	r30, 0x62	; 98
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	80 83       	st	Z, r24
		PORTF &= ~(1 << PORTF3);
     9f0:	80 81       	ld	r24, Z
     9f2:	87 7f       	andi	r24, 0xF7	; 247
     9f4:	80 83       	st	Z, r24
     9f6:	08 95       	ret
	}
	else if((PORTF & (1<<PORTF4)) == (1<<PORTF4)){
     9f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fc:	84 ff       	sbrs	r24, 4
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <wash_LED_switch+0x48>
		PORTF &= ~(1 << PORTF4);
     a00:	e2 e6       	ldi	r30, 0x62	; 98
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8f 7e       	andi	r24, 0xEF	; 239
     a08:	80 83       	st	Z, r24
     a0a:	08 95       	ret
		state = 1;
	}
	else if(state = 1){
		PORTF |= (1 << PORTF2);
     a0c:	e2 e6       	ldi	r30, 0x62	; 98
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	80 83       	st	Z, r24
     a16:	08 95       	ret

00000a18 <rinse_LED_switch>:
}

void rinse_LED_switch(){
	uint8_t state = 0;
	
	if((PORTF & (1<<PORTF5)) == (1<<PORTF5)){
     a18:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a1c:	85 ff       	sbrs	r24, 5
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <rinse_LED_switch+0x1a>
		PORTF |= (1 << PORTF6);
     a20:	e2 e6       	ldi	r30, 0x62	; 98
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	80 64       	ori	r24, 0x40	; 64
     a28:	80 83       	st	Z, r24
		PORTF &= ~(1 << PORTF5);
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 7d       	andi	r24, 0xDF	; 223
     a2e:	80 83       	st	Z, r24
     a30:	08 95       	ret
	}
	else if((PORTF & (1<<PORTF6)) == (1<<PORTF6)){
     a32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a36:	86 ff       	sbrs	r24, 6
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <rinse_LED_switch+0x34>
		PORTF |= (1 << PORTF7);
     a3a:	e2 e6       	ldi	r30, 0x62	; 98
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	80 83       	st	Z, r24
		PORTF &= ~(1 << PORTF6);
     a44:	80 81       	ld	r24, Z
     a46:	8f 7b       	andi	r24, 0xBF	; 191
     a48:	80 83       	st	Z, r24
     a4a:	08 95       	ret
	}
	else if((PORTF & (1<<PORTF7)) == (1<<PORTF7)){
     a4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a50:	88 23       	and	r24, r24
     a52:	34 f4       	brge	.+12     	; 0xa60 <rinse_LED_switch+0x48>
		PORTF &= ~(1 << PORTF7);
     a54:	e2 e6       	ldi	r30, 0x62	; 98
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	80 83       	st	Z, r24
     a5e:	08 95       	ret
		state = 1;
	}
	else if(state = 1){
		PORTF |= (1 << PORTF5);
     a60:	e2 e6       	ldi	r30, 0x62	; 98
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	80 62       	ori	r24, 0x20	; 32
     a68:	80 83       	st	Z, r24
     a6a:	08 95       	ret

00000a6c <spin_LED_switch>:
		state = 0;
	}
}

void spin_LED_switch(){
	if(PORTG == (1<<PORTG0))			{PORTG = (1 << PORTG1);}
     a6c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	21 f4       	brne	.+8      	; 0xa7c <spin_LED_switch+0x10>
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a7a:	08 95       	ret
	else if(PORTG == (1<<PORTG1))		{PORTG = (1 << PORTG2);}
     a7c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <spin_LED_switch+0x20>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a8a:	08 95       	ret
	else if(PORTG == (1<<PORTG2))		{PORTG = 0;}
     a8c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	19 f4       	brne	.+6      	; 0xa9a <spin_LED_switch+0x2e>
     a94:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a98:	08 95       	ret
	else if(PORTG == 0)					{PORTG = (1<<PORTG0);}
     a9a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     a9e:	81 11       	cpse	r24, r1
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <spin_LED_switch+0x3c>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     aa8:	08 95       	ret

00000aaa <INT0_Init>:
volatile enum {POWERON, POWEROFF} powerState;
volatile enum {RUN, STANDBY, RESERVE, PAUSE} workState;
volatile enum {FINISH_WASH, FINISH_RINSE, FINISH_SPIN, FINISH_STANDBY} finishState;

void INT0_Init(){
	EIMSK |= (1 << INT0) | (1 << INT1);    // INT0 인터럽트 활성화
     aaa:	89 b7       	in	r24, 0x39	; 57
     aac:	83 60       	ori	r24, 0x03	; 3
     aae:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC01) | (1 << ISC00) | (1 << ISC11) | (1 << ISC10);    // 하강 엣지에서 인터럽트 발생
     ab0:	ea e6       	ldi	r30, 0x6A	; 106
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 60       	ori	r24, 0x0F	; 15
     ab8:	80 83       	st	Z, r24
	
	// sleep 모드 활성화
	MCUCR |= (1<<SE);
     aba:	85 b7       	in	r24, 0x35	; 53
     abc:	80 62       	ori	r24, 0x20	; 32
     abe:	85 bf       	out	0x35, r24	; 53
     ac0:	08 95       	ret

00000ac2 <__vector_1>:
}

// 파워 버튼 외부 인터럽트(전원 ON/OFF)
ISR(INT0_vect){
     ac2:	1f 92       	push	r1
     ac4:	0f 92       	push	r0
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	0f 92       	push	r0
     aca:	11 24       	eor	r1, r1
     acc:	0b b6       	in	r0, 0x3b	; 59
     ace:	0f 92       	push	r0
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	8f e3       	ldi	r24, 0x3F	; 63
     aea:	9c e9       	ldi	r25, 0x9C	; 156
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <__vector_1+0x2a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <__vector_1+0x30>
     af2:	00 00       	nop
	_delay_ms(10);
	
	// 전원 켜진 상태에서 전원버튼 눌렀을 때
	if(powerState == POWERON)
     af4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <powerState>
     af8:	81 11       	cpse	r24, r1
     afa:	2d c0       	rjmp	.+90     	; 0xb56 <__vector_1+0x94>
	{
		powerState = POWEROFF;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <powerState>
		DCMotorStop();			// 세탁기 우선 정지
     b02:	75 dd       	rcall	.-1302   	; 0x5ee <DCMotorStop>
		powerOffBuzzer();		// 전원 꺼짐 부저 울리기
     b04:	ba db       	rcall	.-2188   	; 0x27a <powerOffBuzzer>
     b06:	40 e3       	ldi	r20, 0x30	; 48
		LCD_write_XY_string(0, 0, "   POWER OFF    ");	// LCD 출력
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	35 df       	rcall	.-406    	; 0x97a <LCD_write_XY_string>
     b10:	41 e4       	ldi	r20, 0x41	; 65
		LCD_write_XY_string(1, 0, "     Bye..      ");
     b12:	51 e0       	ldi	r21, 0x01	; 1
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	30 df       	rcall	.-416    	; 0x97a <LCD_write_XY_string>
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	2d e3       	ldi	r18, 0x3D	; 61
     b1e:	89 e4       	ldi	r24, 0x49	; 73
     b20:	91 50       	subi	r25, 0x01	; 1
     b22:	20 40       	sbci	r18, 0x00	; 0
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <__vector_1+0x5e>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <__vector_1+0x68>
     b2a:	00 00       	nop
		_delay_ms(1500);
		LCD_clear();
     b2c:	e6 de       	rcall	.-564    	; 0x8fa <LCD_clear>
     b2e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTF = 0x00;
     b32:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTG = 0x00; // ALL LED OFF
     b36:	85 b7       	in	r24, 0x35	; 53
		
		// STANDBY 슬립모드
		MCUCR |= (1<<SE);
     b38:	80 62       	ori	r24, 0x20	; 32
     b3a:	85 bf       	out	0x35, r24	; 53
     b3c:	85 b7       	in	r24, 0x35	; 53
		MCUCR |= (0 << SM0) | (1 << SM1) | (1 << SM2);
     b3e:	84 61       	ori	r24, 0x14	; 20
     b40:	85 bf       	out	0x35, r24	; 53
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	23 ed       	ldi	r18, 0xD3	; 211
     b46:	80 e3       	ldi	r24, 0x30	; 48
     b48:	91 50       	subi	r25, 0x01	; 1
     b4a:	20 40       	sbci	r18, 0x00	; 0
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <__vector_1+0x86>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <__vector_1+0x90>
     b52:	00 00       	nop
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <__vector_1+0xae>
     b56:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <powerState>
		
		// 딜레이가 없으면 잠깐 LCD가 표시됨
		_delay_ms(1000);
	}
	// 전원 꺼진 상태에서 전원버튼 눌렀을 때
	else if(powerState == POWEROFF)
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	49 f4       	brne	.+18     	; 0xb70 <__vector_1+0xae>
     b5e:	9a e0       	ldi	r25, 0x0A	; 10
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     b60:	88 e1       	ldi	r24, 0x18	; 24
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	a8 95       	wdr
     b68:	81 bd       	out	0x21, r24	; 33
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	91 bd       	out	0x21, r25	; 33
     b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__vector_1+0xac>
     b70:	88 b7       	in	r24, 0x38	; 56
		// 재시작(리셋)
		wdt_enable(WDTO_60MS);	// 60ms 후 워치도그 타이머 리셋
		while(1);				// 리셋까지 대기
	}
	// 채터링 예방
	EIFR |= 0x01;
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	88 bf       	out	0x38, r24	; 56
     b76:	8f e3       	ldi	r24, 0x3F	; 63
     b78:	9c e9       	ldi	r25, 0x9C	; 156
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <__vector_1+0xb8>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <__vector_1+0xbe>
     b80:	00 00       	nop
     b82:	ff 91       	pop	r31
	_delay_ms(10);
}
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0b be       	out	0x3b, r0	; 59
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_2>:
     ba8:	1f 92       	push	r1


// 동작 버튼 외부 인터럽트(일시정지 기능)
ISR(INT1_vect){
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	0b b6       	in	r0, 0x3b	; 59
     bb4:	0f 92       	push	r0
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	8f e3       	ldi	r24, 0x3F	; 63
     bd0:	9c e9       	ldi	r25, 0x9C	; 156
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <__vector_2+0x2a>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <__vector_2+0x30>
     bd8:	00 00       	nop
	_delay_ms(10);
	buttonBuzzer();
     bda:	86 db       	rcall	.-2292   	; 0x2e8 <buttonBuzzer>
	if(workState == STANDBY){
     bdc:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	19 f4       	brne	.+6      	; 0xbea <__vector_2+0x42>
		workState = RUN;
     be4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <workState>
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <__vector_2+0x60>
	}
	else if(workState == RUN)
     bea:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
     bee:	81 11       	cpse	r24, r1
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__vector_2+0x52>
	{
		workState = PAUSE;
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <workState>
     bf8:	07 c0       	rjmp	.+14     	; 0xc08 <__vector_2+0x60>
	}
	else if(workState == PAUSE && ((PINC & (0x01 << PINC5)) == (0x01 << PINC5)))
     bfa:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	19 f4       	brne	.+6      	; 0xc08 <__vector_2+0x60>
     c02:	9d 99       	sbic	0x13, 5	; 19
	{
		// 문 열림 감지
		workState = RUN;
     c04:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <workState>
	}
	
	// 채터링 예방
	EIFR |= 0x02;
     c08:	88 b7       	in	r24, 0x38	; 56
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	88 bf       	out	0x38, r24	; 56
     c0e:	8f e3       	ldi	r24, 0x3F	; 63
     c10:	9c e9       	ldi	r25, 0x9C	; 156
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <__vector_2+0x6a>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <__vector_2+0x70>
     c18:	00 00       	nop
	_delay_ms(10);
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <main>:

int main(void)
{
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	a0 97       	sbiw	r28, 0x20	; 32
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     c54:	5b de       	rcall	.-842    	; 0x90c <LCD_init>
	// LCD backlight ON
	PORTB |= (1<<PORTB1);
     c56:	c1 9a       	sbi	0x18, 1	; 24
	LCD_write_XY_string(0, 0, "INITIALIZING...");
     c58:	42 e5       	ldi	r20, 0x52	; 82
     c5a:	51 e0       	ldi	r21, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
	DS1302_Init();
     c60:	8c de       	rcall	.-744    	; 0x97a <LCD_write_XY_string>
	led_Init();
     c62:	6f dd       	rcall	.-1314   	; 0x742 <DS1302_Init>
	button_Init();
     c64:	93 de       	rcall	.-730    	; 0x98c <led_Init>
     c66:	31 da       	rcall	.-2974   	; 0xca <button_Init>
	buzzer_Init();
     c68:	b8 da       	rcall	.-2704   	; 0x1da <buzzer_Init>
     c6a:	ad dc       	rcall	.-1702   	; 0x5c6 <DC_Motor_Init>
	DC_Motor_Init();
     c6c:	1e df       	rcall	.-452    	; 0xaaa <INT0_Init>
     c6e:	b9 9a       	sbi	0x17, 1	; 23
	INT0_Init();
     c70:	a5 98       	cbi	0x14, 5	; 20
     c72:	78 94       	sei
	
	// 전원 꺼짐 시 LCD backlight OFF
	DDRB |= (1<<DDRB1);
     c74:	19 82       	std	Y+1, r1	; 0x01
	
	// 문 열림 감지
	DDRC &= ~(1<<PINC5);
     c76:	8b e0       	ldi	r24, 0x0B	; 11
	
	sei();
     c78:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t prevSec = 0, prevSec2 = 0, timer = 0;
	uint8_t washTimeSet[] = {0, 11, 21, 31};
     c7a:	95 e1       	ldi	r25, 0x15	; 21
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	9f e1       	ldi	r25, 0x1F	; 31
     c80:	9c 83       	std	Y+4, r25	; 0x04
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	9e 83       	std	Y+6, r25	; 0x06
	uint8_t spinTimeSet[] = {0, 6, 11, 16};
     c88:	8f 83       	std	Y+7, r24	; 0x07
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	88 87       	std	Y+8, r24	; 0x08
     c8e:	80 e5       	ldi	r24, 0x50	; 80
     c90:	89 87       	std	Y+9, r24	; 0x09
     c92:	84 e6       	ldi	r24, 0x64	; 100
	uint8_t reserveTimeSet[] = {80, 100, 120, 0};
     c94:	8a 87       	std	Y+10, r24	; 0x0a
     c96:	88 e7       	ldi	r24, 0x78	; 120
     c98:	8b 87       	std	Y+11, r24	; 0x0b
     c9a:	1c 86       	std	Y+12, r1	; 0x0c
     c9c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <powerState>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t tot_time = 0;
	uint8_t rinseNum = 1;
	
	char buff[20];
	
	powerState = POWERON;
     ca2:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <workState>
	workState = STANDBY;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <finishState>
	finishState = FINISH_STANDBY;
     cac:	af da       	rcall	.-2722   	; 0x20c <powerOnBuzzer>
	
	powerOnBuzzer();
     cae:	42 e6       	ldi	r20, 0x62	; 98
     cb0:	51 e0       	ldi	r21, 0x01	; 1
	LCD_write_XY_string(0, 0, "  <>WELCOME!<>  ");
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	61 de       	rcall	.-830    	; 0x97a <LCD_write_XY_string>
     cb8:	43 e7       	ldi	r20, 0x73	; 115
     cba:	51 e0       	ldi	r21, 0x01	; 1
	LCD_write_XY_string(1, 0, "  ............  ");
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	5c de       	rcall	.-840    	; 0x97a <LCD_write_XY_string>
     cc2:	2f ef       	ldi	r18, 0xFF	; 255
     cc4:	83 ed       	ldi	r24, 0xD3	; 211
     cc6:	90 e3       	ldi	r25, 0x30	; 48
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	80 40       	sbci	r24, 0x00	; 0
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <main+0x88>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <main+0x92>
     cd2:	00 00       	nop
     cd4:	12 de       	rcall	.-988    	; 0x8fa <LCD_clear>
     cd6:	99 24       	eor	r9, r9
	_delay_ms(1000);
	LCD_clear();
     cd8:	93 94       	inc	r9
     cda:	61 2c       	mov	r6, r1
	// 기본 동작 설정 값
	uint8_t washTime = 2, rinseTime = 10, spinTime = 2;
	uint8_t workCount = 0;
	uint8_t reserveTime = 0;
	uint8_t tot_time = 0;
	uint8_t rinseNum = 1;
     cdc:	71 2c       	mov	r7, r1
     cde:	68 94       	set
	uint8_t spinTimeSet[] = {0, 6, 11, 16};
	uint8_t reserveTimeSet[] = {80, 100, 120, 0};
	// 기본 동작 설정 값
	uint8_t washTime = 2, rinseTime = 10, spinTime = 2;
	uint8_t workCount = 0;
	uint8_t reserveTime = 0;
     ce0:	55 24       	eor	r5, r5
	uint8_t washTimeSet[] = {0, 11, 21, 31};
	uint8_t spinTimeSet[] = {0, 6, 11, 16};
	uint8_t reserveTimeSet[] = {80, 100, 120, 0};
	// 기본 동작 설정 값
	uint8_t washTime = 2, rinseTime = 10, spinTime = 2;
	uint8_t workCount = 0;
     ce2:	51 f8       	bld	r5, 1
	uint8_t prevSec = 0, prevSec2 = 0, timer = 0;
	uint8_t washTimeSet[] = {0, 11, 21, 31};
	uint8_t spinTimeSet[] = {0, 6, 11, 16};
	uint8_t reserveTimeSet[] = {80, 100, 120, 0};
	// 기본 동작 설정 값
	uint8_t washTime = 2, rinseTime = 10, spinTime = 2;
     ce4:	68 94       	set
     ce6:	88 24       	eor	r8, r8
     ce8:	81 f8       	bld	r8, 1
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	d1 2c       	mov	r13, r1
     cee:	10 e0       	ldi	r17, 0x00	; 0
	// 문 열림 감지
	DDRC &= ~(1<<PINC5);
	
	sei();
	
	uint8_t prevSec = 0, prevSec2 = 0, timer = 0;
     cf0:	68 94       	set
     cf2:	22 24       	eor	r2, r2
     cf4:	21 f8       	bld	r2, 1
					spinTime = spin_switch(spinTime);
				}
				else if((reserv_Bt_State() == 1)){
					// 예약 기능
					buttonBuzzer();
					workState = RESERVE;
     cf6:	0f 2e       	mov	r0, r31
     cf8:	f3 e0       	ldi	r31, 0x03	; 3
     cfa:	4f 2e       	mov	r4, r31
					DCMotorStop();
					finishBuzzer();
					LCD_write_XY_string(0, 0, "  WORK  FINISH  ");
					LCD_write_XY_string(1, 0, "  ////////////  ");
					_delay_ms(1000);
					finishState = FINISH_STANDBY;
     cfc:	f0 2d       	mov	r31, r0
     cfe:	7e 01       	movw	r14, r28
     d00:	ed e0       	ldi	r30, 0x0D	; 13
     d02:	ee 0e       	add	r14, r30
					if((timer % 2) == 0)
					LCD_write_XY_string(0, 0, "  SPINNING...][ ");
					else
					LCD_write_XY_string(0, 0, "  SPINNING...[] ");
					
					sprintf(buff,"REMAINING: %02dsec", spinTimeSet[spinTime] - timer);
     d04:	f1 1c       	adc	r15, r1
     d06:	0f 2e       	mov	r0, r31
     d08:	fa e0       	ldi	r31, 0x0A	; 10
     d0a:	3f 2e       	mov	r3, r31
						workCount = 0;		// 타이머 초기화를 위해
						LCD_write_XY_string(0, 0, "  RINSE FINISH  ");
						LCD_write_XY_string(1, 0, "  ------------  ");
						_delay_ms(1000);
					}
					DCMotor_Rinsemode(rinseTime - timer);	// 드럼세탁기 동작부
     d0c:	f0 2d       	mov	r31, r0
     d0e:	0f 2e       	mov	r0, r31
     d10:	f6 ea       	ldi	r31, 0xA6	; 166
     d12:	af 2e       	mov	r10, r31
				LCD_write_XY_string(0,0," |Reserve Mode| ");
				LCD_write_XY_string(1,0,buff);
				if(prevSec2 != stTime.seconds){
					prevSec2 = stTime.seconds;
					timer--;
					sprintf(buff,"COMPLETE %02d sec ", timer);
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	bf 2e       	mov	r11, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <main+0xf2>
     d1c:	dc 2c       	mov	r13, r12
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <main+0xf2>
     d20:	dc 2c       	mov	r13, r12
					timer = reserveTimeSet[reserveTime];
				}
				LCD_write_XY_string(0,0," |Reserve Mode| ");
				LCD_write_XY_string(1,0,buff);
				if(prevSec2 != stTime.seconds){
					prevSec2 = stTime.seconds;
     d22:	77 24       	eor	r7, r7
     d24:	73 94       	inc	r7
					
					sprintf(buff,"REMAINING: %02dsec", washTimeSet[washTime] - timer);
					
					LCD_write_XY_string(1, 0, buff);
					
					workCount = 1;	// 작동 시작
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <main+0xf2>
     d28:	dc 2c       	mov	r13, r12
     d2a:	77 24       	eor	r7, r7
					
					sprintf(buff,"REMAINING: %02dsec", spinTimeSet[spinTime] - timer);
					
					LCD_write_XY_string(1, 0, buff);
					
					workCount = 1;	// 작동 시작
     d2c:	73 94       	inc	r7
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <main+0xf2>
     d30:	dc 2c       	mov	r13, r12
     d32:	82 e1       	ldi	r24, 0x12	; 18
	_delay_ms(1000);
	LCD_clear();
	
	while (1)
	{
		DS1302_GetTime(&stTime);
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	7a dd       	rcall	.-1292   	; 0x82c <DS1302_GetTime>
     d38:	82 e1       	ldi	r24, 0x12	; 18
     d3a:	93 e0       	ldi	r25, 0x03	; 3
		DS1302_GetDate(&stTime);
     d3c:	86 dd       	rcall	.-1268   	; 0x84a <DS1302_GetDate>
     d3e:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <powerState>
     d42:	88 23       	and	r24, r24
		switch(powerState){
     d44:	21 f0       	breq	.+8      	; 0xd4e <main+0x10e>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	09 f4       	brne	.+2      	; 0xd4c <main+0x10c>
     d4a:	f9 c1       	rjmp	.+1010   	; 0x113e <__stack+0x3f>
     d4c:	f2 cf       	rjmp	.-28     	; 0xd32 <main+0xf2>
     d4e:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <stTime>
			// 전원 켜진 이후 동작부
			case POWERON:
						
			if(prevSec != stTime.seconds){
     d52:	81 17       	cp	r24, r17
     d54:	39 f0       	breq	.+14     	; 0xd64 <main+0x124>
     d56:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
				// 현재 시간 보여주기
				if(workState == STANDBY) showTime();
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <main+0x120>
     d5e:	f3 d1       	rcall	.+998    	; 0x1146 <showTime>
     d60:	10 91 12 03 	lds	r17, 0x0312	; 0x800312 <stTime>
				prevSec = stTime.seconds;
     d64:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
			}
			
			// 문 열림 감지(동작 상태에서 문 열림이 감지되면)
			if((workState == RUN) && (PINC & (0x01 << PINC5)) == 0){
     d68:	81 11       	cpse	r24, r1
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <main+0x13c>
     d6c:	9d 99       	sbic	0x13, 5	; 19
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <main+0x13c>
     d70:	44 e8       	ldi	r20, 0x84	; 132
     d72:	51 e0       	ldi	r21, 0x01	; 1
				LCD_write_XY_string(0,0,"Plz,  Close Door");
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	01 de       	rcall	.-1022   	; 0x97a <LCD_write_XY_string>
     d78:	40 92 1d 03 	sts	0x031D, r4	; 0x80031d <workState>
				workState = PAUSE;
     d7c:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <workState>
			}
			
			switch (workState){
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	41 f0       	breq	.+16     	; 0xd94 <main+0x154>
     d84:	08 f4       	brcc	.+2      	; 0xd88 <main+0x148>
     d86:	81 c0       	rjmp	.+258    	; 0xe8a <main+0x24a>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	59 f1       	breq	.+86     	; 0xde2 <main+0x1a2>
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	09 f4       	brne	.+2      	; 0xd92 <main+0x152>
				case STANDBY:
				//	전원 켜진 상태에서 버튼 눌렀을 시, 스탠바이 상태에서
				if((wash_Bt_State() == 1)){
     d90:	cf c1       	rjmp	.+926    	; 0x1130 <__stack+0x31>
     d92:	cf cf       	rjmp	.-98     	; 0xd32 <main+0xf2>
     d94:	9e d9       	rcall	.-3268   	; 0xd2 <wash_Bt_State>
					buttonBuzzer();
     d96:	81 30       	cpi	r24, 0x01	; 1
					washTime = wash_switch(washTime);
     d98:	29 f4       	brne	.+10     	; 0xda4 <main+0x164>
     d9a:	a6 da       	rcall	.-2740   	; 0x2e8 <buttonBuzzer>
     d9c:	88 2d       	mov	r24, r8
     d9e:	67 dd       	rcall	.-1330   	; 0x86e <wash_switch>
				}
				else if((rinse_Bt_State() == 1)){
     da0:	88 2e       	mov	r8, r24
     da2:	c7 cf       	rjmp	.-114    	; 0xd32 <main+0xf2>
     da4:	b7 d9       	rcall	.-3218   	; 0x114 <rinse_Bt_State>
					buttonBuzzer();
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	29 f4       	brne	.+10     	; 0xdb4 <main+0x174>
					rinseNum = rinse_switch(rinseNum);
     daa:	9e da       	rcall	.-2756   	; 0x2e8 <buttonBuzzer>
     dac:	89 2d       	mov	r24, r9
     dae:	69 dd       	rcall	.-1326   	; 0x882 <rinse_switch>
     db0:	98 2e       	mov	r9, r24
     db2:	bf cf       	rjmp	.-130    	; 0xd32 <main+0xf2>
				}
				else if((spin_Bt_State() == 1)){
     db4:	d0 d9       	rcall	.-3168   	; 0x156 <spin_Bt_State>
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	29 f4       	brne	.+10     	; 0xdc4 <main+0x184>
					buttonBuzzer();
     dba:	96 da       	rcall	.-2772   	; 0x2e8 <buttonBuzzer>
					spinTime = spin_switch(spinTime);
     dbc:	85 2d       	mov	r24, r5
     dbe:	6b dd       	rcall	.-1322   	; 0x896 <spin_switch>
     dc0:	58 2e       	mov	r5, r24
     dc2:	b7 cf       	rjmp	.-146    	; 0xd32 <main+0xf2>
				}
				else if((reserv_Bt_State() == 1)){
     dc4:	e9 d9       	rcall	.-3118   	; 0x198 <reserv_Bt_State>
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <main+0x18c>
     dca:	b3 cf       	rjmp	.-154    	; 0xd32 <main+0xf2>
     dcc:	8d da       	rcall	.-2790   	; 0x2e8 <buttonBuzzer>
					// 예약 기능
					buttonBuzzer();
     dce:	20 92 1d 03 	sts	0x031D, r2	; 0x80031d <workState>
					workState = RESERVE;
     dd2:	e9 e0       	ldi	r30, 0x09	; 9
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
					timer = reserveTimeSet[reserveTime];
     dd6:	ec 0f       	add	r30, r28
     dd8:	fd 1f       	adc	r31, r29
     dda:	e6 0d       	add	r30, r6
     ddc:	f1 1d       	adc	r31, r1
     dde:	00 81       	ld	r16, Z
     de0:	a8 cf       	rjmp	.-176    	; 0xd32 <main+0xf2>
     de2:	da d9       	rcall	.-3148   	; 0x198 <reserv_Bt_State>
				}
				break;
				
				//예약 기능
				case RESERVE:
				if((reserv_Bt_State() == 1)){
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	99 f4       	brne	.+38     	; 0xe0e <main+0x1ce>
     de8:	7f da       	rcall	.-2818   	; 0x2e8 <buttonBuzzer>
					// 예약 기능
					buttonBuzzer();
     dea:	86 2d       	mov	r24, r6
     dec:	5e dd       	rcall	.-1348   	; 0x8aa <reserve_Mode>
					reserveTime = reserve_Mode(reserveTime);
     dee:	68 2e       	mov	r6, r24
     df0:	e9 e0       	ldi	r30, 0x09	; 9
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	ec 0f       	add	r30, r28
					if(reserveTimeSet[reserveTime] == 0){
     df6:	fd 1f       	adc	r31, r29
     df8:	e8 0f       	add	r30, r24
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	81 11       	cpse	r24, r1
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <main+0x1cc>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <workState>
						workState = STANDBY;
     e08:	61 2c       	mov	r6, r1
						reserveTime = 0;
     e0a:	93 cf       	rjmp	.-218    	; 0xd32 <main+0xf2>
						break;
     e0c:	08 2f       	mov	r16, r24
					}
					timer = reserveTimeSet[reserveTime];
     e0e:	45 e9       	ldi	r20, 0x95	; 149
				}
				LCD_write_XY_string(0,0," |Reserve Mode| ");
     e10:	51 e0       	ldi	r21, 0x01	; 1
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	b1 dd       	rcall	.-1182   	; 0x97a <LCD_write_XY_string>
     e18:	a7 01       	movw	r20, r14
     e1a:	60 e0       	ldi	r22, 0x00	; 0
				LCD_write_XY_string(1,0,buff);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	ad dd       	rcall	.-1190   	; 0x97a <LCD_write_XY_string>
     e20:	c0 90 12 03 	lds	r12, 0x0312	; 0x800312 <stTime>
     e24:	cd 14       	cp	r12, r13
				if(prevSec2 != stTime.seconds){
     e26:	09 f4       	brne	.+2      	; 0xe2a <main+0x1ea>
     e28:	84 cf       	rjmp	.-248    	; 0xd32 <main+0xf2>
     e2a:	01 50       	subi	r16, 0x01	; 1
     e2c:	1f 92       	push	r1
     e2e:	0f 93       	push	r16
					prevSec2 = stTime.seconds;
					timer--;
     e30:	bf 92       	push	r11
					sprintf(buff,"COMPLETE %02d sec ", timer);
     e32:	af 92       	push	r10
     e34:	ff 92       	push	r15
     e36:	ef 92       	push	r14
     e38:	ed d1       	rcall	.+986    	; 0x1214 <sprintf>
     e3a:	a7 01       	movw	r20, r14
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	9c dd       	rcall	.-1224   	; 0x97a <LCD_write_XY_string>
					LCD_write_XY_string(1,0,buff);
     e42:	e1 e0       	ldi	r30, 0x01	; 1
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ec 0f       	add	r30, r28
     e48:	fd 1f       	adc	r31, r29
     e4a:	e8 0d       	add	r30, r8
					// 전체 세탁 시간이 timer와 같아지면 동작 시작(예약 시간은 완료시간)
					tot_time = washTimeSet[washTime] + (rinseTime*rinseNum) + spinTimeSet[spinTime];
					if(timer == tot_time){
     e4c:	f1 1d       	adc	r31, r1
     e4e:	20 81       	ld	r18, Z
     e50:	e5 e0       	ldi	r30, 0x05	; 5
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	e5 0d       	add	r30, r5
     e5a:	f1 1d       	adc	r31, r1
     e5c:	80 81       	ld	r24, Z
     e5e:	28 0f       	add	r18, r24
     e60:	89 2d       	mov	r24, r9
     e62:	88 0f       	add	r24, r24
     e64:	98 2f       	mov	r25, r24
     e66:	99 0f       	add	r25, r25
     e68:	99 0f       	add	r25, r25
     e6a:	89 0f       	add	r24, r25
     e6c:	82 0f       	add	r24, r18
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	08 13       	cpse	r16, r24
     e7c:	4f cf       	rjmp	.-354    	; 0xd1c <main+0xdc>
     e7e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <workState>
     e82:	dc 2c       	mov	r13, r12
     e84:	71 2c       	mov	r7, r1
						workState = RUN;
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	54 cf       	rjmp	.-344    	; 0xd32 <main+0xf2>
					timer = reserveTimeSet[reserveTime];
				}
				LCD_write_XY_string(0,0," |Reserve Mode| ");
				LCD_write_XY_string(1,0,buff);
				if(prevSec2 != stTime.seconds){
					prevSec2 = stTime.seconds;
     e8a:	c0 90 12 03 	lds	r12, 0x0312	; 0x800312 <stTime>
					LCD_write_XY_string(1,0,buff);
					// 전체 세탁 시간이 timer와 같아지면 동작 시작(예약 시간은 완료시간)
					tot_time = washTimeSet[washTime] + (rinseTime*rinseNum) + spinTimeSet[spinTime];
					if(timer == tot_time){
						workState = RUN;
						timer = 0;
     e8e:	cd 14       	cp	r12, r13
				
				case RUN:
				// 전원 켜진 상태에서, RUN 상태에서,
				
				// 타이머 증가를 위한 부분
				if(prevSec2 != stTime.seconds){
     e90:	21 f0       	breq	.+8      	; 0xe9a <main+0x25a>
     e92:	71 10       	cpse	r7, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <main+0x258>
     e96:	00 e0       	ldi	r16, 0x00	; 0
					prevSec2 = stTime.seconds;
					// 작동 시작하면 타이머 초기화
					if(workCount == 0) timer = 0;
     e98:	0f 5f       	subi	r16, 0xFF	; 255
     e9a:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <finishState>
					timer++;
     e9e:	83 30       	cpi	r24, 0x03	; 3
				}
				
				if(finishState == FINISH_STANDBY){
     ea0:	09 f0       	breq	.+2      	; 0xea4 <main+0x264>
     ea2:	50 c0       	rjmp	.+160    	; 0xf44 <main+0x304>
     ea4:	81 10       	cpse	r8, r1
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <main+0x270>
     ea8:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <finishState>
					if(washTime == 0) {
     eac:	dc 2c       	mov	r13, r12
						finishState = FINISH_WASH; // 세탁 미설정 시 바로 헹굼으로
     eae:	41 cf       	rjmp	.-382    	; 0xd32 <main+0xf2>
     eb0:	00 fd       	sbrc	r16, 0
						break;
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <main+0x280>
					}
					
					if((timer % 2) == 0)
     eb4:	49 eb       	ldi	r20, 0xB9	; 185
     eb6:	51 e0       	ldi	r21, 0x01	; 1
					LCD_write_XY_string(0, 0, "  WASHING...()    ");
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	5e dd       	rcall	.-1348   	; 0x97a <LCD_write_XY_string>
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <main+0x28a>
     ec0:	4c ec       	ldi	r20, 0xCC	; 204
					else
					LCD_write_XY_string(0, 0, "  WASHING...)(  ");
     ec2:	51 e0       	ldi	r21, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	58 dd       	rcall	.-1360   	; 0x97a <LCD_write_XY_string>
     eca:	e1 e0       	ldi	r30, 0x01	; 1
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
					
					sprintf(buff,"REMAINING: %02dsec", washTimeSet[washTime] - timer);
     ece:	ec 0f       	add	r30, r28
     ed0:	fd 1f       	adc	r31, r29
     ed2:	e8 0d       	add	r30, r8
     ed4:	f1 1d       	adc	r31, r1
     ed6:	d0 80       	ld	r13, Z
     ed8:	8d 2d       	mov	r24, r13
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 1b       	sub	r24, r16
     ede:	91 09       	sbc	r25, r1
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	8d ed       	ldi	r24, 0xDD	; 221
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	ff 92       	push	r15
     eee:	ef 92       	push	r14
     ef0:	91 d1       	rcall	.+802    	; 0x1214 <sprintf>
					
					LCD_write_XY_string(1, 0, buff);
     ef2:	a7 01       	movw	r20, r14
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	40 dd       	rcall	.-1408   	; 0x97a <LCD_write_XY_string>
     efa:	8d 2d       	mov	r24, r13
					
					workCount = 1;	// 작동 시작
					DCMotor_Washmode(washTimeSet[washTime] - timer);	// 드럼세탁기 동작부
     efc:	80 1b       	sub	r24, r16
     efe:	80 db       	rcall	.-2304   	; 0x600 <DCMotor_Washmode>
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
					
					if(timer >= washTimeSet[washTime]){	// washtime 지나면
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0d 15       	cp	r16, r13
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <main+0x2d2>
     f10:	07 cf       	rjmp	.-498    	; 0xd20 <main+0xe0>
     f12:	6d db       	rcall	.-2342   	; 0x5ee <DCMotorStop>
     f14:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <finishState>
						DCMotorStop();		// 모터 멈추고
     f18:	40 ef       	ldi	r20, 0xF0	; 240
						finishState = FINISH_WASH;	// 세탁 끝
     f1a:	51 e0       	ldi	r21, 0x01	; 1
						workCount = 0;		// 타이머 초기화를 위해
						LCD_write_XY_string(0, 0, "  WASH FINISH   ");
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	2c dd       	rcall	.-1448   	; 0x97a <LCD_write_XY_string>
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	52 e0       	ldi	r21, 0x02	; 2
						LCD_write_XY_string(1, 0, "  ***********   ");
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	27 dd       	rcall	.-1458   	; 0x97a <LCD_write_XY_string>
     f2c:	ff ef       	ldi	r31, 0xFF	; 255
     f2e:	23 ed       	ldi	r18, 0xD3	; 211
     f30:	80 e3       	ldi	r24, 0x30	; 48
     f32:	f1 50       	subi	r31, 0x01	; 1
     f34:	20 40       	sbci	r18, 0x00	; 0
     f36:	80 40       	sbci	r24, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <main+0x2f2>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <main+0x2fc>
     f3c:	00 00       	nop
     f3e:	dc 2c       	mov	r13, r12
     f40:	71 2c       	mov	r7, r1
					DCMotor_Washmode(washTimeSet[washTime] - timer);	// 드럼세탁기 동작부
					
					if(timer >= washTimeSet[washTime]){	// washtime 지나면
						DCMotorStop();		// 모터 멈추고
						finishState = FINISH_WASH;	// 세탁 끝
						workCount = 0;		// 타이머 초기화를 위해
     f42:	f7 ce       	rjmp	.-530    	; 0xd32 <main+0xf2>
     f44:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <finishState>
						_delay_ms(1000);
					}
				}
				
				// rinse 부분
				else if(finishState == FINISH_WASH)
     f48:	81 11       	cpse	r24, r1
     f4a:	51 c0       	rjmp	.+162    	; 0xfee <main+0x3ae>
     f4c:	91 10       	cpse	r9, r1
				{
					if(rinseNum == 0){
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <main+0x31a>
     f50:	81 e0       	ldi	r24, 0x01	; 1
						finishState = FINISH_RINSE; // 헹굼 미설정 시 바로 탈수로
     f52:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <finishState>
						break;
     f56:	dc 2c       	mov	r13, r12
     f58:	ec ce       	rjmp	.-552    	; 0xd32 <main+0xf2>
					}
					
					if((timer % 2) == 0)
     f5a:	00 fd       	sbrc	r16, 0
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <main+0x32a>
					LCD_write_XY_string(0, 0, "  RINSING...><  ");
     f5e:	42 e1       	ldi	r20, 0x12	; 18
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	09 dd       	rcall	.-1518   	; 0x97a <LCD_write_XY_string>
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <main+0x334>
					else
					LCD_write_XY_string(0, 0, "  RINSING...<>  ");
     f6a:	43 e2       	ldi	r20, 0x23	; 35
     f6c:	52 e0       	ldi	r21, 0x02	; 2
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	03 dd       	rcall	.-1530   	; 0x97a <LCD_write_XY_string>
     f74:	1f 92       	push	r1
					
					sprintf(buff,"REMAINING: [%02d] ", rinseNum);
     f76:	9f 92       	push	r9
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	ff 93       	push	r31
     f7e:	ef 93       	push	r30
     f80:	ff 92       	push	r15
     f82:	ef 92       	push	r14
     f84:	47 d1       	rcall	.+654    	; 0x1214 <sprintf>
     f86:	a7 01       	movw	r20, r14
     f88:	60 e0       	ldi	r22, 0x00	; 0
					
					LCD_write_XY_string(1, 0, buff);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	f6 dc       	rcall	.-1556   	; 0x97a <LCD_write_XY_string>
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
					
					workCount = 1;	// 작동 시작
					if((rinseTime-timer) == 0){
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0a 30       	cpi	r16, 0x0A	; 10
     f9c:	e9 f4       	brne	.+58     	; 0xfd8 <main+0x398>
     f9e:	9a 94       	dec	r9
     fa0:	91 10       	cpse	r9, r1
						rinseNum--;
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <main+0x39e>
						timer = 0;
					}
					if(rinseNum == 0){	// 헹굼 횟수만큼 하면
     fa4:	24 db       	rcall	.-2488   	; 0x5ee <DCMotorStop>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
						DCMotorStop();		// 모터 멈추고
     fa8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <finishState>
						finishState = FINISH_RINSE;	// 세탁 끝
     fac:	47 e4       	ldi	r20, 0x47	; 71
     fae:	52 e0       	ldi	r21, 0x02	; 2
     fb0:	60 e0       	ldi	r22, 0x00	; 0
						workCount = 0;		// 타이머 초기화를 위해
						LCD_write_XY_string(0, 0, "  RINSE FINISH  ");
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	e2 dc       	rcall	.-1596   	; 0x97a <LCD_write_XY_string>
     fb6:	48 e5       	ldi	r20, 0x58	; 88
     fb8:	52 e0       	ldi	r21, 0x02	; 2
     fba:	60 e0       	ldi	r22, 0x00	; 0
						LCD_write_XY_string(1, 0, "  ------------  ");
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	dd dc       	rcall	.-1606   	; 0x97a <LCD_write_XY_string>
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	93 ed       	ldi	r25, 0xD3	; 211
     fc4:	e0 e3       	ldi	r30, 0x30	; 48
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e0 40       	sbci	r30, 0x00	; 0
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <main+0x386>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <main+0x390>
     fd0:	00 00       	nop
     fd2:	00 e0       	ldi	r16, 0x00	; 0
     fd4:	71 2c       	mov	r7, r1
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <main+0x3a4>
					LCD_write_XY_string(1, 0, buff);
					
					workCount = 1;	// 작동 시작
					if((rinseTime-timer) == 0){
						rinseNum--;
						timer = 0;
     fd8:	77 24       	eor	r7, r7
					}
					if(rinseNum == 0){	// 헹굼 횟수만큼 하면
						DCMotorStop();		// 모터 멈추고
						finishState = FINISH_RINSE;	// 세탁 끝
						workCount = 0;		// 타이머 초기화를 위해
     fda:	73 94       	inc	r7
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <main+0x3a4>
					
					sprintf(buff,"REMAINING: [%02d] ", rinseNum);
					
					LCD_write_XY_string(1, 0, buff);
					
					workCount = 1;	// 작동 시작
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	77 24       	eor	r7, r7
     fe2:	73 94       	inc	r7
					if((rinseTime-timer) == 0){
						rinseNum--;
						timer = 0;
     fe4:	83 2d       	mov	r24, r3
					
					sprintf(buff,"REMAINING: [%02d] ", rinseNum);
					
					LCD_write_XY_string(1, 0, buff);
					
					workCount = 1;	// 작동 시작
     fe6:	80 1b       	sub	r24, r16
						workCount = 0;		// 타이머 초기화를 위해
						LCD_write_XY_string(0, 0, "  RINSE FINISH  ");
						LCD_write_XY_string(1, 0, "  ------------  ");
						_delay_ms(1000);
					}
					DCMotor_Rinsemode(rinseTime - timer);	// 드럼세탁기 동작부
     fe8:	4d db       	rcall	.-2406   	; 0x684 <DCMotor_Rinsemode>
     fea:	dc 2c       	mov	r13, r12
     fec:	a2 ce       	rjmp	.-700    	; 0xd32 <main+0xf2>
     fee:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <finishState>
				}
				// spin 부분
				else if(finishState == FINISH_RINSE)
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <main+0x3b8>
     ff6:	4e c0       	rjmp	.+156    	; 0x1094 <main+0x454>
     ff8:	51 10       	cpse	r5, r1
				{
					// 탈수 미설정 시 바로 대기로
					if(spinTime == 0){
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <main+0x3c4>
     ffc:	20 92 1b 03 	sts	0x031B, r2	; 0x80031b <finishState>
						finishState = FINISH_SPIN;
						break;
    1000:	dc 2c       	mov	r13, r12
    1002:	97 ce       	rjmp	.-722    	; 0xd32 <main+0xf2>
					}
					
					if((timer % 2) == 0)
    1004:	00 fd       	sbrc	r16, 0
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <main+0x3d4>
					LCD_write_XY_string(0, 0, "  SPINNING...][ ");
    1008:	49 e6       	ldi	r20, 0x69	; 105
    100a:	52 e0       	ldi	r21, 0x02	; 2
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	b4 dc       	rcall	.-1688   	; 0x97a <LCD_write_XY_string>
    1012:	05 c0       	rjmp	.+10     	; 0x101e <main+0x3de>
					else
					LCD_write_XY_string(0, 0, "  SPINNING...[] ");
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	52 e0       	ldi	r21, 0x02	; 2
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	ae dc       	rcall	.-1700   	; 0x97a <LCD_write_XY_string>
					
					sprintf(buff,"REMAINING: %02dsec", spinTimeSet[spinTime] - timer);
    101e:	e5 e0       	ldi	r30, 0x05	; 5
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	ec 0f       	add	r30, r28
    1024:	fd 1f       	adc	r31, r29
    1026:	e5 0d       	add	r30, r5
    1028:	f1 1d       	adc	r31, r1
    102a:	d0 80       	ld	r13, Z
    102c:	8d 2d       	mov	r24, r13
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	80 1b       	sub	r24, r16
    1032:	91 09       	sbc	r25, r1
    1034:	9f 93       	push	r25
    1036:	8f 93       	push	r24
    1038:	8d ed       	ldi	r24, 0xDD	; 221
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	9f 93       	push	r25
    103e:	8f 93       	push	r24
    1040:	ff 92       	push	r15
					
					LCD_write_XY_string(1, 0, buff);
    1042:	ef 92       	push	r14
    1044:	e7 d0       	rcall	.+462    	; 0x1214 <sprintf>
    1046:	a7 01       	movw	r20, r14
    1048:	60 e0       	ldi	r22, 0x00	; 0
					
					workCount = 1;	// 작동 시작
					DCMotor_Spinmode();	// 드럼세탁기 동작부
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	96 dc       	rcall	.-1748   	; 0x97a <LCD_write_XY_string>
					
					if(timer >= spinTimeSet[spinTime]){	// washtime 지나면
    104e:	6e db       	rcall	.-2340   	; 0x72c <DCMotor_Spinmode>
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0d 15       	cp	r16, r13
    105e:	08 f4       	brcc	.+2      	; 0x1062 <main+0x422>
						DCMotorStop();		// 모터 멈추고
    1060:	63 ce       	rjmp	.-826    	; 0xd28 <main+0xe8>
    1062:	c5 da       	rcall	.-2678   	; 0x5ee <DCMotorStop>
						finishState = FINISH_SPIN;	// 세탁 끝
    1064:	20 92 1b 03 	sts	0x031B, r2	; 0x80031b <finishState>
						workCount = 0;		// 타이머 초기화를 위해
						LCD_write_XY_string(0, 0, "  SPIN  FINISH  ");
    1068:	4b e8       	ldi	r20, 0x8B	; 139
    106a:	52 e0       	ldi	r21, 0x02	; 2
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
						LCD_write_XY_string(1, 0, "  ::::::::::::  ");
    1070:	84 dc       	rcall	.-1784   	; 0x97a <LCD_write_XY_string>
    1072:	4c e9       	ldi	r20, 0x9C	; 156
    1074:	52 e0       	ldi	r21, 0x02	; 2
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	7f dc       	rcall	.-1794   	; 0x97a <LCD_write_XY_string>
    107c:	ff ef       	ldi	r31, 0xFF	; 255
    107e:	23 ed       	ldi	r18, 0xD3	; 211
    1080:	80 e3       	ldi	r24, 0x30	; 48
    1082:	f1 50       	subi	r31, 0x01	; 1
    1084:	20 40       	sbci	r18, 0x00	; 0
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <main+0x442>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <main+0x44c>
					DCMotor_Spinmode();	// 드럼세탁기 동작부
					
					if(timer >= spinTimeSet[spinTime]){	// washtime 지나면
						DCMotorStop();		// 모터 멈추고
						finishState = FINISH_SPIN;	// 세탁 끝
						workCount = 0;		// 타이머 초기화를 위해
    108c:	00 00       	nop
    108e:	dc 2c       	mov	r13, r12
						LCD_write_XY_string(1, 0, "  ::::::::::::  ");
						_delay_ms(1000);
					}
				}
				// 빨래 끝
				else if(finishState == FINISH_SPIN)
    1090:	71 2c       	mov	r7, r1
    1092:	4f ce       	rjmp	.-866    	; 0xd32 <main+0xf2>
    1094:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <finishState>
    1098:	82 30       	cpi	r24, 0x02	; 2
				{
					DCMotorStop();
    109a:	09 f0       	breq	.+2      	; 0x109e <main+0x45e>
    109c:	49 ce       	rjmp	.-878    	; 0xd30 <main+0xf0>
					finishBuzzer();
    109e:	a7 da       	rcall	.-2738   	; 0x5ee <DCMotorStop>
    10a0:	40 d9       	rcall	.-3456   	; 0x322 <finishBuzzer>
					LCD_write_XY_string(0, 0, "  WORK  FINISH  ");
    10a2:	4d ea       	ldi	r20, 0xAD	; 173
    10a4:	52 e0       	ldi	r21, 0x02	; 2
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	67 dc       	rcall	.-1842   	; 0x97a <LCD_write_XY_string>
    10ac:	4e eb       	ldi	r20, 0xBE	; 190
					LCD_write_XY_string(1, 0, "  ////////////  ");
    10ae:	52 e0       	ldi	r21, 0x02	; 2
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	62 dc       	rcall	.-1852   	; 0x97a <LCD_write_XY_string>
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	e3 ed       	ldi	r30, 0xD3	; 211
    10ba:	f0 e3       	ldi	r31, 0x30	; 48
    10bc:	91 50       	subi	r25, 0x01	; 1
    10be:	e0 40       	sbci	r30, 0x00	; 0
    10c0:	f0 40       	sbci	r31, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <main+0x47c>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <main+0x486>
					_delay_ms(1000);
					finishState = FINISH_STANDBY;
    10c6:	00 00       	nop
    10c8:	40 92 1b 03 	sts	0x031B, r4	; 0x80031b <finishState>
					workState = STANDBY;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <workState>
					
					// 세탁이 종료되면 전원 OFF
					powerState = POWEROFF;
    10d2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <powerState>
					DCMotorStop();			// 세탁기 우선 정지
    10d6:	8b da       	rcall	.-2794   	; 0x5ee <DCMotorStop>
					powerOffBuzzer();		// 전원 꺼짐 부저 울리기
    10d8:	d0 d8       	rcall	.-3680   	; 0x27a <powerOffBuzzer>
    10da:	40 e3       	ldi	r20, 0x30	; 48
					LCD_write_XY_string(0, 0, "   POWER OFF    ");	// LCD 출력
    10dc:	51 e0       	ldi	r21, 0x01	; 1
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	4b dc       	rcall	.-1898   	; 0x97a <LCD_write_XY_string>
    10e4:	41 e4       	ldi	r20, 0x41	; 65
    10e6:	51 e0       	ldi	r21, 0x01	; 1
					LCD_write_XY_string(1, 0, "     Bye..      ");
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	46 dc       	rcall	.-1908   	; 0x97a <LCD_write_XY_string>
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	8d e3       	ldi	r24, 0x3D	; 61
    10f2:	99 e4       	ldi	r25, 0x49	; 73
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	80 40       	sbci	r24, 0x00	; 0
    10f8:	90 40       	sbci	r25, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <main+0x4b4>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <main+0x4be>
    10fe:	00 00       	nop
    1100:	fc db       	rcall	.-2056   	; 0x8fa <LCD_clear>
    1102:	e2 e6       	ldi	r30, 0x62	; 98
    1104:	f0 e0       	ldi	r31, 0x00	; 0
					_delay_ms(1500);
					LCD_clear();
    1106:	10 82       	st	Z, r1
    1108:	e5 e6       	ldi	r30, 0x65	; 101
					PORTF = 0x00;
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	10 82       	st	Z, r1
    110e:	85 b7       	in	r24, 0x35	; 53
					PORTG = 0x00; // ALL LED OFF
    1110:	80 62       	ori	r24, 0x20	; 32
    1112:	85 bf       	out	0x35, r24	; 53
    1114:	85 b7       	in	r24, 0x35	; 53
					
					// STANDBY 슬립모드
					MCUCR |= (1<<SE);
    1116:	84 61       	ori	r24, 0x14	; 20
    1118:	85 bf       	out	0x35, r24	; 53
    111a:	ff ef       	ldi	r31, 0xFF	; 255
					MCUCR |= (0 << SM0) | (1 << SM1) | (1 << SM2);
    111c:	23 ed       	ldi	r18, 0xD3	; 211
    111e:	80 e3       	ldi	r24, 0x30	; 48
    1120:	f1 50       	subi	r31, 0x01	; 1
    1122:	20 40       	sbci	r18, 0x00	; 0
    1124:	80 40       	sbci	r24, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <__stack+0x21>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <__stack+0x2b>
    112a:	00 00       	nop
    112c:	dc 2c       	mov	r13, r12
    112e:	01 ce       	rjmp	.-1022   	; 0xd32 <main+0xf2>
    1130:	5e da       	rcall	.-2884   	; 0x5ee <DCMotorStop>
    1132:	4f ec       	ldi	r20, 0xCF	; 207
    1134:	52 e0       	ldi	r21, 0x02	; 2
    1136:	60 e0       	ldi	r22, 0x00	; 0
					_delay_ms(1000);
				}
				break;

				case PAUSE:
				DCMotorStop();
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	1f dc       	rcall	.-1986   	; 0x97a <LCD_write_XY_string>
				LCD_write_XY_string(1, 0, "      PAUSE     ");
    113c:	fa cd       	rjmp	.-1036   	; 0xd32 <main+0xf2>
    113e:	57 da       	rcall	.-2898   	; 0x5ee <DCMotorStop>
    1140:	dc db       	rcall	.-2120   	; 0x8fa <LCD_clear>
    1142:	c1 98       	cbi	0x18, 1	; 24
    1144:	f6 cd       	rjmp	.-1044   	; 0xd32 <main+0xf2>

00001146 <showTime>:
    1146:	ef 92       	push	r14
				break;
    1148:	ff 92       	push	r15
			break;
			
			
			case POWEROFF:
			// 전원 OFF
			DCMotorStop();
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
			LCD_clear();
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
			// LCD backlight OFF;
			PORTB &= ~(1<<PORTB1);
    1152:	cd b7       	in	r28, 0x3d	; 61
			break;
    1154:	de b7       	in	r29, 0x3e	; 62
			}
		}
	}
}

void showTime(){
    1156:	64 97       	sbiw	r28, 0x14	; 20
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
	char timeBuff[20];
	sprintf(timeBuff, "TIME  [%02d:%02d:%02d]", stTime.hour, stTime.minutes, stTime.seconds);
    1162:	0f 2e       	mov	r0, r31
    1164:	f2 e1       	ldi	r31, 0x12	; 18
    1166:	ef 2e       	mov	r14, r31
    1168:	f3 e0       	ldi	r31, 0x03	; 3
    116a:	ff 2e       	mov	r15, r31
    116c:	f0 2d       	mov	r31, r0
    116e:	d7 01       	movw	r26, r14
    1170:	8c 91       	ld	r24, X
    1172:	1f 92       	push	r1
    1174:	8f 93       	push	r24
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	8c 91       	ld	r24, X
    117a:	11 97       	sbiw	r26, 0x01	; 1
    117c:	1f 92       	push	r1
    117e:	8f 93       	push	r24
    1180:	12 96       	adiw	r26, 0x02	; 2
    1182:	8c 91       	ld	r24, X
    1184:	1f 92       	push	r1
    1186:	8f 93       	push	r24
    1188:	80 ee       	ldi	r24, 0xE0	; 224
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	8e 01       	movw	r16, r28
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	1f 93       	push	r17
    1198:	0f 93       	push	r16
    119a:	3c d0       	rcall	.+120    	; 0x1214 <sprintf>
	LCD_write_XY_string(0, 0, timeBuff);
    119c:	a8 01       	movw	r20, r16
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	eb db       	rcall	.-2090   	; 0x97a <LCD_write_XY_string>
	sprintf(timeBuff, "[%02d/%02d/%02d (%s)]", stTime.year, stTime.month, stTime.date, dayofweek[stTime.dayofweek]);
    11a4:	d7 01       	movw	r26, r14
    11a6:	15 96       	adiw	r26, 0x05	; 5
    11a8:	ec 91       	ld	r30, X
    11aa:	15 97       	sbiw	r26, 0x05	; 5
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ea 5f       	subi	r30, 0xFA	; 250
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	8f 93       	push	r24
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 93       	push	r24
    11be:	13 96       	adiw	r26, 0x03	; 3
    11c0:	8c 91       	ld	r24, X
    11c2:	13 97       	sbiw	r26, 0x03	; 3
    11c4:	1f 92       	push	r1
    11c6:	8f 93       	push	r24
    11c8:	14 96       	adiw	r26, 0x04	; 4
    11ca:	8c 91       	ld	r24, X
    11cc:	14 97       	sbiw	r26, 0x04	; 4
    11ce:	1f 92       	push	r1
    11d0:	8f 93       	push	r24
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	8c 91       	ld	r24, X
    11d6:	1f 92       	push	r1
    11d8:	8f 93       	push	r24
    11da:	87 ef       	ldi	r24, 0xF7	; 247
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	9f 93       	push	r25
    11e0:	8f 93       	push	r24
    11e2:	1f 93       	push	r17
    11e4:	0f 93       	push	r16
    11e6:	16 d0       	rcall	.+44     	; 0x1214 <sprintf>
	LCD_write_XY_string(1, 0, timeBuff);
    11e8:	a8 01       	movw	r20, r16
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	c5 db       	rcall	.-2166   	; 0x97a <LCD_write_XY_string>
}
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	64 96       	adiw	r28, 0x14	; 20
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	08 95       	ret

00001214 <sprintf>:
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	2e 97       	sbiw	r28, 0x0e	; 14
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	0d 89       	ldd	r16, Y+21	; 0x15
    122e:	1e 89       	ldd	r17, Y+22	; 0x16
    1230:	86 e0       	ldi	r24, 0x06	; 6
    1232:	8c 83       	std	Y+4, r24	; 0x04
    1234:	1a 83       	std	Y+2, r17	; 0x02
    1236:	09 83       	std	Y+1, r16	; 0x01
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f e7       	ldi	r25, 0x7F	; 127
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	ae 01       	movw	r20, r28
    1242:	47 5e       	subi	r20, 0xE7	; 231
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	6f 89       	ldd	r22, Y+23	; 0x17
    1248:	78 8d       	ldd	r23, Y+24	; 0x18
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	10 d0       	rcall	.+32     	; 0x1270 <vfprintf>
    1250:	ef 81       	ldd	r30, Y+7	; 0x07
    1252:	f8 85       	ldd	r31, Y+8	; 0x08
    1254:	e0 0f       	add	r30, r16
    1256:	f1 1f       	adc	r31, r17
    1258:	10 82       	st	Z, r1
    125a:	2e 96       	adiw	r28, 0x0e	; 14
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <vfprintf>:
    1270:	2f 92       	push	r2
    1272:	3f 92       	push	r3
    1274:	4f 92       	push	r4
    1276:	5f 92       	push	r5
    1278:	6f 92       	push	r6
    127a:	7f 92       	push	r7
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2b 97       	sbiw	r28, 0x0b	; 11
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	6c 01       	movw	r12, r24
    12a6:	7b 01       	movw	r14, r22
    12a8:	8a 01       	movw	r16, r20
    12aa:	fc 01       	movw	r30, r24
    12ac:	17 82       	std	Z+7, r1	; 0x07
    12ae:	16 82       	std	Z+6, r1	; 0x06
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	81 ff       	sbrs	r24, 1
    12b4:	bf c1       	rjmp	.+894    	; 0x1634 <vfprintf+0x3c4>
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	3c 01       	movw	r6, r24
    12bc:	f6 01       	movw	r30, r12
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	f7 01       	movw	r30, r14
    12c2:	93 fd       	sbrc	r25, 3
    12c4:	85 91       	lpm	r24, Z+
    12c6:	93 ff       	sbrs	r25, 3
    12c8:	81 91       	ld	r24, Z+
    12ca:	7f 01       	movw	r14, r30
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfprintf+0x62>
    12d0:	ad c1       	rjmp	.+858    	; 0x162c <vfprintf+0x3bc>
    12d2:	85 32       	cpi	r24, 0x25	; 37
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <vfprintf+0x74>
    12d6:	93 fd       	sbrc	r25, 3
    12d8:	85 91       	lpm	r24, Z+
    12da:	93 ff       	sbrs	r25, 3
    12dc:	81 91       	ld	r24, Z+
    12de:	7f 01       	movw	r14, r30
    12e0:	85 32       	cpi	r24, 0x25	; 37
    12e2:	21 f4       	brne	.+8      	; 0x12ec <vfprintf+0x7c>
    12e4:	b6 01       	movw	r22, r12
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	d6 d1       	rcall	.+940    	; 0x1696 <fputc>
    12ea:	e8 cf       	rjmp	.-48     	; 0x12bc <vfprintf+0x4c>
    12ec:	91 2c       	mov	r9, r1
    12ee:	21 2c       	mov	r2, r1
    12f0:	31 2c       	mov	r3, r1
    12f2:	ff e1       	ldi	r31, 0x1F	; 31
    12f4:	f3 15       	cp	r31, r3
    12f6:	d8 f0       	brcs	.+54     	; 0x132e <vfprintf+0xbe>
    12f8:	8b 32       	cpi	r24, 0x2B	; 43
    12fa:	79 f0       	breq	.+30     	; 0x131a <vfprintf+0xaa>
    12fc:	38 f4       	brcc	.+14     	; 0x130c <vfprintf+0x9c>
    12fe:	80 32       	cpi	r24, 0x20	; 32
    1300:	79 f0       	breq	.+30     	; 0x1320 <vfprintf+0xb0>
    1302:	83 32       	cpi	r24, 0x23	; 35
    1304:	a1 f4       	brne	.+40     	; 0x132e <vfprintf+0xbe>
    1306:	23 2d       	mov	r18, r3
    1308:	20 61       	ori	r18, 0x10	; 16
    130a:	1d c0       	rjmp	.+58     	; 0x1346 <vfprintf+0xd6>
    130c:	8d 32       	cpi	r24, 0x2D	; 45
    130e:	61 f0       	breq	.+24     	; 0x1328 <vfprintf+0xb8>
    1310:	80 33       	cpi	r24, 0x30	; 48
    1312:	69 f4       	brne	.+26     	; 0x132e <vfprintf+0xbe>
    1314:	23 2d       	mov	r18, r3
    1316:	21 60       	ori	r18, 0x01	; 1
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <vfprintf+0xd6>
    131a:	83 2d       	mov	r24, r3
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	38 2e       	mov	r3, r24
    1320:	e3 2d       	mov	r30, r3
    1322:	e4 60       	ori	r30, 0x04	; 4
    1324:	3e 2e       	mov	r3, r30
    1326:	2a c0       	rjmp	.+84     	; 0x137c <vfprintf+0x10c>
    1328:	f3 2d       	mov	r31, r3
    132a:	f8 60       	ori	r31, 0x08	; 8
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <vfprintf+0xf8>
    132e:	37 fc       	sbrc	r3, 7
    1330:	2d c0       	rjmp	.+90     	; 0x138c <vfprintf+0x11c>
    1332:	20 ed       	ldi	r18, 0xD0	; 208
    1334:	28 0f       	add	r18, r24
    1336:	2a 30       	cpi	r18, 0x0A	; 10
    1338:	40 f0       	brcs	.+16     	; 0x134a <vfprintf+0xda>
    133a:	8e 32       	cpi	r24, 0x2E	; 46
    133c:	b9 f4       	brne	.+46     	; 0x136c <vfprintf+0xfc>
    133e:	36 fc       	sbrc	r3, 6
    1340:	75 c1       	rjmp	.+746    	; 0x162c <vfprintf+0x3bc>
    1342:	23 2d       	mov	r18, r3
    1344:	20 64       	ori	r18, 0x40	; 64
    1346:	32 2e       	mov	r3, r18
    1348:	19 c0       	rjmp	.+50     	; 0x137c <vfprintf+0x10c>
    134a:	36 fe       	sbrs	r3, 6
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0xea>
    134e:	8a e0       	ldi	r24, 0x0A	; 10
    1350:	98 9e       	mul	r9, r24
    1352:	20 0d       	add	r18, r0
    1354:	11 24       	eor	r1, r1
    1356:	92 2e       	mov	r9, r18
    1358:	11 c0       	rjmp	.+34     	; 0x137c <vfprintf+0x10c>
    135a:	ea e0       	ldi	r30, 0x0A	; 10
    135c:	2e 9e       	mul	r2, r30
    135e:	20 0d       	add	r18, r0
    1360:	11 24       	eor	r1, r1
    1362:	22 2e       	mov	r2, r18
    1364:	f3 2d       	mov	r31, r3
    1366:	f0 62       	ori	r31, 0x20	; 32
    1368:	3f 2e       	mov	r3, r31
    136a:	08 c0       	rjmp	.+16     	; 0x137c <vfprintf+0x10c>
    136c:	8c 36       	cpi	r24, 0x6C	; 108
    136e:	21 f4       	brne	.+8      	; 0x1378 <vfprintf+0x108>
    1370:	83 2d       	mov	r24, r3
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	38 2e       	mov	r3, r24
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x10c>
    1378:	88 36       	cpi	r24, 0x68	; 104
    137a:	41 f4       	brne	.+16     	; 0x138c <vfprintf+0x11c>
    137c:	f7 01       	movw	r30, r14
    137e:	93 fd       	sbrc	r25, 3
    1380:	85 91       	lpm	r24, Z+
    1382:	93 ff       	sbrs	r25, 3
    1384:	81 91       	ld	r24, Z+
    1386:	7f 01       	movw	r14, r30
    1388:	81 11       	cpse	r24, r1
    138a:	b3 cf       	rjmp	.-154    	; 0x12f2 <vfprintf+0x82>
    138c:	98 2f       	mov	r25, r24
    138e:	9f 7d       	andi	r25, 0xDF	; 223
    1390:	95 54       	subi	r25, 0x45	; 69
    1392:	93 30       	cpi	r25, 0x03	; 3
    1394:	28 f4       	brcc	.+10     	; 0x13a0 <vfprintf+0x130>
    1396:	0c 5f       	subi	r16, 0xFC	; 252
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	9f e3       	ldi	r25, 0x3F	; 63
    139c:	99 83       	std	Y+1, r25	; 0x01
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <vfprintf+0x14a>
    13a0:	83 36       	cpi	r24, 0x63	; 99
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <vfprintf+0x140>
    13a4:	83 37       	cpi	r24, 0x73	; 115
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <vfprintf+0x154>
    13a8:	83 35       	cpi	r24, 0x53	; 83
    13aa:	09 f0       	breq	.+2      	; 0x13ae <vfprintf+0x13e>
    13ac:	55 c0       	rjmp	.+170    	; 0x1458 <vfprintf+0x1e8>
    13ae:	20 c0       	rjmp	.+64     	; 0x13f0 <vfprintf+0x180>
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 81       	ld	r24, Z
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	0e 5f       	subi	r16, 0xFE	; 254
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	88 24       	eor	r8, r8
    13bc:	83 94       	inc	r8
    13be:	91 2c       	mov	r9, r1
    13c0:	53 01       	movw	r10, r6
    13c2:	12 c0       	rjmp	.+36     	; 0x13e8 <vfprintf+0x178>
    13c4:	28 01       	movw	r4, r16
    13c6:	f2 e0       	ldi	r31, 0x02	; 2
    13c8:	4f 0e       	add	r4, r31
    13ca:	51 1c       	adc	r5, r1
    13cc:	f8 01       	movw	r30, r16
    13ce:	a0 80       	ld	r10, Z
    13d0:	b1 80       	ldd	r11, Z+1	; 0x01
    13d2:	36 fe       	sbrs	r3, 6
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <vfprintf+0x16c>
    13d6:	69 2d       	mov	r22, r9
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0x170>
    13dc:	6f ef       	ldi	r22, 0xFF	; 255
    13de:	7f ef       	ldi	r23, 0xFF	; 255
    13e0:	c5 01       	movw	r24, r10
    13e2:	4e d1       	rcall	.+668    	; 0x1680 <strnlen>
    13e4:	4c 01       	movw	r8, r24
    13e6:	82 01       	movw	r16, r4
    13e8:	f3 2d       	mov	r31, r3
    13ea:	ff 77       	andi	r31, 0x7F	; 127
    13ec:	3f 2e       	mov	r3, r31
    13ee:	15 c0       	rjmp	.+42     	; 0x141a <vfprintf+0x1aa>
    13f0:	28 01       	movw	r4, r16
    13f2:	22 e0       	ldi	r18, 0x02	; 2
    13f4:	42 0e       	add	r4, r18
    13f6:	51 1c       	adc	r5, r1
    13f8:	f8 01       	movw	r30, r16
    13fa:	a0 80       	ld	r10, Z
    13fc:	b1 80       	ldd	r11, Z+1	; 0x01
    13fe:	36 fe       	sbrs	r3, 6
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <vfprintf+0x198>
    1402:	69 2d       	mov	r22, r9
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0x19c>
    1408:	6f ef       	ldi	r22, 0xFF	; 255
    140a:	7f ef       	ldi	r23, 0xFF	; 255
    140c:	c5 01       	movw	r24, r10
    140e:	2d d1       	rcall	.+602    	; 0x166a <strnlen_P>
    1410:	4c 01       	movw	r8, r24
    1412:	f3 2d       	mov	r31, r3
    1414:	f0 68       	ori	r31, 0x80	; 128
    1416:	3f 2e       	mov	r3, r31
    1418:	82 01       	movw	r16, r4
    141a:	33 fc       	sbrc	r3, 3
    141c:	19 c0       	rjmp	.+50     	; 0x1450 <vfprintf+0x1e0>
    141e:	82 2d       	mov	r24, r2
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	88 16       	cp	r8, r24
    1424:	99 06       	cpc	r9, r25
    1426:	a0 f4       	brcc	.+40     	; 0x1450 <vfprintf+0x1e0>
    1428:	b6 01       	movw	r22, r12
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	33 d1       	rcall	.+614    	; 0x1696 <fputc>
    1430:	2a 94       	dec	r2
    1432:	f5 cf       	rjmp	.-22     	; 0x141e <vfprintf+0x1ae>
    1434:	f5 01       	movw	r30, r10
    1436:	37 fc       	sbrc	r3, 7
    1438:	85 91       	lpm	r24, Z+
    143a:	37 fe       	sbrs	r3, 7
    143c:	81 91       	ld	r24, Z+
    143e:	5f 01       	movw	r10, r30
    1440:	b6 01       	movw	r22, r12
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	28 d1       	rcall	.+592    	; 0x1696 <fputc>
    1446:	21 10       	cpse	r2, r1
    1448:	2a 94       	dec	r2
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	82 1a       	sub	r8, r18
    144e:	91 08       	sbc	r9, r1
    1450:	81 14       	cp	r8, r1
    1452:	91 04       	cpc	r9, r1
    1454:	79 f7       	brne	.-34     	; 0x1434 <vfprintf+0x1c4>
    1456:	e1 c0       	rjmp	.+450    	; 0x161a <vfprintf+0x3aa>
    1458:	84 36       	cpi	r24, 0x64	; 100
    145a:	11 f0       	breq	.+4      	; 0x1460 <vfprintf+0x1f0>
    145c:	89 36       	cpi	r24, 0x69	; 105
    145e:	39 f5       	brne	.+78     	; 0x14ae <vfprintf+0x23e>
    1460:	f8 01       	movw	r30, r16
    1462:	37 fe       	sbrs	r3, 7
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <vfprintf+0x204>
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	0c 5f       	subi	r16, 0xFC	; 252
    1470:	1f 4f       	sbci	r17, 0xFF	; 255
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <vfprintf+0x214>
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	07 2e       	mov	r0, r23
    147a:	00 0c       	add	r0, r0
    147c:	88 0b       	sbc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	0e 5f       	subi	r16, 0xFE	; 254
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	f3 2d       	mov	r31, r3
    1486:	ff 76       	andi	r31, 0x6F	; 111
    1488:	3f 2e       	mov	r3, r31
    148a:	97 ff       	sbrs	r25, 7
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x230>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	f0 68       	ori	r31, 0x80	; 128
    149e:	3f 2e       	mov	r3, r31
    14a0:	2a e0       	ldi	r18, 0x0A	; 10
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	a3 01       	movw	r20, r6
    14a6:	33 d1       	rcall	.+614    	; 0x170e <__ultoa_invert>
    14a8:	88 2e       	mov	r8, r24
    14aa:	86 18       	sub	r8, r6
    14ac:	44 c0       	rjmp	.+136    	; 0x1536 <vfprintf+0x2c6>
    14ae:	85 37       	cpi	r24, 0x75	; 117
    14b0:	31 f4       	brne	.+12     	; 0x14be <vfprintf+0x24e>
    14b2:	23 2d       	mov	r18, r3
    14b4:	2f 7e       	andi	r18, 0xEF	; 239
    14b6:	b2 2e       	mov	r11, r18
    14b8:	2a e0       	ldi	r18, 0x0A	; 10
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	25 c0       	rjmp	.+74     	; 0x1508 <vfprintf+0x298>
    14be:	93 2d       	mov	r25, r3
    14c0:	99 7f       	andi	r25, 0xF9	; 249
    14c2:	b9 2e       	mov	r11, r25
    14c4:	8f 36       	cpi	r24, 0x6F	; 111
    14c6:	c1 f0       	breq	.+48     	; 0x14f8 <vfprintf+0x288>
    14c8:	18 f4       	brcc	.+6      	; 0x14d0 <vfprintf+0x260>
    14ca:	88 35       	cpi	r24, 0x58	; 88
    14cc:	79 f0       	breq	.+30     	; 0x14ec <vfprintf+0x27c>
    14ce:	ae c0       	rjmp	.+348    	; 0x162c <vfprintf+0x3bc>
    14d0:	80 37       	cpi	r24, 0x70	; 112
    14d2:	19 f0       	breq	.+6      	; 0x14da <vfprintf+0x26a>
    14d4:	88 37       	cpi	r24, 0x78	; 120
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <vfprintf+0x270>
    14d8:	a9 c0       	rjmp	.+338    	; 0x162c <vfprintf+0x3bc>
    14da:	e9 2f       	mov	r30, r25
    14dc:	e0 61       	ori	r30, 0x10	; 16
    14de:	be 2e       	mov	r11, r30
    14e0:	b4 fe       	sbrs	r11, 4
    14e2:	0d c0       	rjmp	.+26     	; 0x14fe <vfprintf+0x28e>
    14e4:	fb 2d       	mov	r31, r11
    14e6:	f4 60       	ori	r31, 0x04	; 4
    14e8:	bf 2e       	mov	r11, r31
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <vfprintf+0x28e>
    14ec:	34 fe       	sbrs	r3, 4
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <vfprintf+0x294>
    14f0:	29 2f       	mov	r18, r25
    14f2:	26 60       	ori	r18, 0x06	; 6
    14f4:	b2 2e       	mov	r11, r18
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <vfprintf+0x294>
    14f8:	28 e0       	ldi	r18, 0x08	; 8
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <vfprintf+0x298>
    14fe:	20 e1       	ldi	r18, 0x10	; 16
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x298>
    1504:	20 e1       	ldi	r18, 0x10	; 16
    1506:	32 e0       	ldi	r19, 0x02	; 2
    1508:	f8 01       	movw	r30, r16
    150a:	b7 fe       	sbrs	r11, 7
    150c:	07 c0       	rjmp	.+14     	; 0x151c <vfprintf+0x2ac>
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	0c 5f       	subi	r16, 0xFC	; 252
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <vfprintf+0x2b8>
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 5f       	subi	r16, 0xFE	; 254
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	a3 01       	movw	r20, r6
    152a:	f1 d0       	rcall	.+482    	; 0x170e <__ultoa_invert>
    152c:	88 2e       	mov	r8, r24
    152e:	86 18       	sub	r8, r6
    1530:	fb 2d       	mov	r31, r11
    1532:	ff 77       	andi	r31, 0x7F	; 127
    1534:	3f 2e       	mov	r3, r31
    1536:	36 fe       	sbrs	r3, 6
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <vfprintf+0x2e4>
    153a:	23 2d       	mov	r18, r3
    153c:	2e 7f       	andi	r18, 0xFE	; 254
    153e:	a2 2e       	mov	r10, r18
    1540:	89 14       	cp	r8, r9
    1542:	58 f4       	brcc	.+22     	; 0x155a <vfprintf+0x2ea>
    1544:	34 fe       	sbrs	r3, 4
    1546:	0b c0       	rjmp	.+22     	; 0x155e <vfprintf+0x2ee>
    1548:	32 fc       	sbrc	r3, 2
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x2ee>
    154c:	83 2d       	mov	r24, r3
    154e:	8e 7e       	andi	r24, 0xEE	; 238
    1550:	a8 2e       	mov	r10, r24
    1552:	05 c0       	rjmp	.+10     	; 0x155e <vfprintf+0x2ee>
    1554:	b8 2c       	mov	r11, r8
    1556:	a3 2c       	mov	r10, r3
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <vfprintf+0x2f0>
    155a:	b8 2c       	mov	r11, r8
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <vfprintf+0x2f0>
    155e:	b9 2c       	mov	r11, r9
    1560:	a4 fe       	sbrs	r10, 4
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <vfprintf+0x312>
    1564:	fe 01       	movw	r30, r28
    1566:	e8 0d       	add	r30, r8
    1568:	f1 1d       	adc	r31, r1
    156a:	80 81       	ld	r24, Z
    156c:	80 33       	cpi	r24, 0x30	; 48
    156e:	21 f4       	brne	.+8      	; 0x1578 <vfprintf+0x308>
    1570:	9a 2d       	mov	r25, r10
    1572:	99 7e       	andi	r25, 0xE9	; 233
    1574:	a9 2e       	mov	r10, r25
    1576:	09 c0       	rjmp	.+18     	; 0x158a <vfprintf+0x31a>
    1578:	a2 fe       	sbrs	r10, 2
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x318>
    157c:	b3 94       	inc	r11
    157e:	b3 94       	inc	r11
    1580:	04 c0       	rjmp	.+8      	; 0x158a <vfprintf+0x31a>
    1582:	8a 2d       	mov	r24, r10
    1584:	86 78       	andi	r24, 0x86	; 134
    1586:	09 f0       	breq	.+2      	; 0x158a <vfprintf+0x31a>
    1588:	b3 94       	inc	r11
    158a:	a3 fc       	sbrc	r10, 3
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <vfprintf+0x33e>
    158e:	a0 fe       	sbrs	r10, 0
    1590:	06 c0       	rjmp	.+12     	; 0x159e <vfprintf+0x32e>
    1592:	b2 14       	cp	r11, r2
    1594:	80 f4       	brcc	.+32     	; 0x15b6 <vfprintf+0x346>
    1596:	28 0c       	add	r2, r8
    1598:	92 2c       	mov	r9, r2
    159a:	9b 18       	sub	r9, r11
    159c:	0d c0       	rjmp	.+26     	; 0x15b8 <vfprintf+0x348>
    159e:	b2 14       	cp	r11, r2
    15a0:	58 f4       	brcc	.+22     	; 0x15b8 <vfprintf+0x348>
    15a2:	b6 01       	movw	r22, r12
    15a4:	80 e2       	ldi	r24, 0x20	; 32
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	76 d0       	rcall	.+236    	; 0x1696 <fputc>
    15aa:	b3 94       	inc	r11
    15ac:	f8 cf       	rjmp	.-16     	; 0x159e <vfprintf+0x32e>
    15ae:	b2 14       	cp	r11, r2
    15b0:	18 f4       	brcc	.+6      	; 0x15b8 <vfprintf+0x348>
    15b2:	2b 18       	sub	r2, r11
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x34a>
    15b6:	98 2c       	mov	r9, r8
    15b8:	21 2c       	mov	r2, r1
    15ba:	a4 fe       	sbrs	r10, 4
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <vfprintf+0x36c>
    15be:	b6 01       	movw	r22, r12
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	68 d0       	rcall	.+208    	; 0x1696 <fputc>
    15c6:	a2 fe       	sbrs	r10, 2
    15c8:	16 c0       	rjmp	.+44     	; 0x15f6 <vfprintf+0x386>
    15ca:	a1 fc       	sbrc	r10, 1
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x364>
    15ce:	88 e7       	ldi	r24, 0x78	; 120
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x368>
    15d4:	88 e5       	ldi	r24, 0x58	; 88
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	b6 01       	movw	r22, r12
    15da:	0c c0       	rjmp	.+24     	; 0x15f4 <vfprintf+0x384>
    15dc:	8a 2d       	mov	r24, r10
    15de:	86 78       	andi	r24, 0x86	; 134
    15e0:	51 f0       	breq	.+20     	; 0x15f6 <vfprintf+0x386>
    15e2:	a1 fe       	sbrs	r10, 1
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x37a>
    15e6:	8b e2       	ldi	r24, 0x2B	; 43
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <vfprintf+0x37c>
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	a7 fc       	sbrc	r10, 7
    15ee:	8d e2       	ldi	r24, 0x2D	; 45
    15f0:	b6 01       	movw	r22, r12
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	50 d0       	rcall	.+160    	; 0x1696 <fputc>
    15f6:	89 14       	cp	r8, r9
    15f8:	30 f4       	brcc	.+12     	; 0x1606 <vfprintf+0x396>
    15fa:	b6 01       	movw	r22, r12
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	4a d0       	rcall	.+148    	; 0x1696 <fputc>
    1602:	9a 94       	dec	r9
    1604:	f8 cf       	rjmp	.-16     	; 0x15f6 <vfprintf+0x386>
    1606:	8a 94       	dec	r8
    1608:	f3 01       	movw	r30, r6
    160a:	e8 0d       	add	r30, r8
    160c:	f1 1d       	adc	r31, r1
    160e:	80 81       	ld	r24, Z
    1610:	b6 01       	movw	r22, r12
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	40 d0       	rcall	.+128    	; 0x1696 <fputc>
    1616:	81 10       	cpse	r8, r1
    1618:	f6 cf       	rjmp	.-20     	; 0x1606 <vfprintf+0x396>
    161a:	22 20       	and	r2, r2
    161c:	09 f4       	brne	.+2      	; 0x1620 <vfprintf+0x3b0>
    161e:	4e ce       	rjmp	.-868    	; 0x12bc <vfprintf+0x4c>
    1620:	b6 01       	movw	r22, r12
    1622:	80 e2       	ldi	r24, 0x20	; 32
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	37 d0       	rcall	.+110    	; 0x1696 <fputc>
    1628:	2a 94       	dec	r2
    162a:	f7 cf       	rjmp	.-18     	; 0x161a <vfprintf+0x3aa>
    162c:	f6 01       	movw	r30, r12
    162e:	86 81       	ldd	r24, Z+6	; 0x06
    1630:	97 81       	ldd	r25, Z+7	; 0x07
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x3c8>
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	2b 96       	adiw	r28, 0x0b	; 11
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	7f 90       	pop	r7
    165e:	6f 90       	pop	r6
    1660:	5f 90       	pop	r5
    1662:	4f 90       	pop	r4
    1664:	3f 90       	pop	r3
    1666:	2f 90       	pop	r2
    1668:	08 95       	ret

0000166a <strnlen_P>:
    166a:	fc 01       	movw	r30, r24
    166c:	05 90       	lpm	r0, Z+
    166e:	61 50       	subi	r22, 0x01	; 1
    1670:	70 40       	sbci	r23, 0x00	; 0
    1672:	01 10       	cpse	r0, r1
    1674:	d8 f7       	brcc	.-10     	; 0x166c <strnlen_P+0x2>
    1676:	80 95       	com	r24
    1678:	90 95       	com	r25
    167a:	8e 0f       	add	r24, r30
    167c:	9f 1f       	adc	r25, r31
    167e:	08 95       	ret

00001680 <strnlen>:
    1680:	fc 01       	movw	r30, r24
    1682:	61 50       	subi	r22, 0x01	; 1
    1684:	70 40       	sbci	r23, 0x00	; 0
    1686:	01 90       	ld	r0, Z+
    1688:	01 10       	cpse	r0, r1
    168a:	d8 f7       	brcc	.-10     	; 0x1682 <strnlen+0x2>
    168c:	80 95       	com	r24
    168e:	90 95       	com	r25
    1690:	8e 0f       	add	r24, r30
    1692:	9f 1f       	adc	r25, r31
    1694:	08 95       	ret

00001696 <fputc>:
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	fb 01       	movw	r30, r22
    16a0:	23 81       	ldd	r18, Z+3	; 0x03
    16a2:	21 fd       	sbrc	r18, 1
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <fputc+0x16>
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	2c c0       	rjmp	.+88     	; 0x1704 <fputc+0x6e>
    16ac:	22 ff       	sbrs	r18, 2
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <fputc+0x46>
    16b0:	46 81       	ldd	r20, Z+6	; 0x06
    16b2:	57 81       	ldd	r21, Z+7	; 0x07
    16b4:	24 81       	ldd	r18, Z+4	; 0x04
    16b6:	35 81       	ldd	r19, Z+5	; 0x05
    16b8:	42 17       	cp	r20, r18
    16ba:	53 07       	cpc	r21, r19
    16bc:	44 f4       	brge	.+16     	; 0x16ce <fputc+0x38>
    16be:	a0 81       	ld	r26, Z
    16c0:	b1 81       	ldd	r27, Z+1	; 0x01
    16c2:	9d 01       	movw	r18, r26
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
    16cc:	8c 93       	st	X, r24
    16ce:	26 81       	ldd	r18, Z+6	; 0x06
    16d0:	37 81       	ldd	r19, Z+7	; 0x07
    16d2:	2f 5f       	subi	r18, 0xFF	; 255
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	37 83       	std	Z+7, r19	; 0x07
    16d8:	26 83       	std	Z+6, r18	; 0x06
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <fputc+0x6e>
    16dc:	8b 01       	movw	r16, r22
    16de:	ec 01       	movw	r28, r24
    16e0:	fb 01       	movw	r30, r22
    16e2:	00 84       	ldd	r0, Z+8	; 0x08
    16e4:	f1 85       	ldd	r31, Z+9	; 0x09
    16e6:	e0 2d       	mov	r30, r0
    16e8:	09 95       	icall
    16ea:	89 2b       	or	r24, r25
    16ec:	e1 f6       	brne	.-72     	; 0x16a6 <fputc+0x10>
    16ee:	d8 01       	movw	r26, r16
    16f0:	16 96       	adiw	r26, 0x06	; 6
    16f2:	8d 91       	ld	r24, X+
    16f4:	9c 91       	ld	r25, X
    16f6:	17 97       	sbiw	r26, 0x07	; 7
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	17 96       	adiw	r26, 0x07	; 7
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
    1700:	16 97       	sbiw	r26, 0x06	; 6
    1702:	ce 01       	movw	r24, r28
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	08 95       	ret

0000170e <__ultoa_invert>:
    170e:	fa 01       	movw	r30, r20
    1710:	aa 27       	eor	r26, r26
    1712:	28 30       	cpi	r18, 0x08	; 8
    1714:	51 f1       	breq	.+84     	; 0x176a <__ultoa_invert+0x5c>
    1716:	20 31       	cpi	r18, 0x10	; 16
    1718:	81 f1       	breq	.+96     	; 0x177a <__ultoa_invert+0x6c>
    171a:	e8 94       	clt
    171c:	6f 93       	push	r22
    171e:	6e 7f       	andi	r22, 0xFE	; 254
    1720:	6e 5f       	subi	r22, 0xFE	; 254
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	af 4f       	sbci	r26, 0xFF	; 255
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	3e d0       	rcall	.+124    	; 0x17aa <__ultoa_invert+0x9c>
    172e:	b4 e0       	ldi	r27, 0x04	; 4
    1730:	3c d0       	rcall	.+120    	; 0x17aa <__ultoa_invert+0x9c>
    1732:	67 0f       	add	r22, r23
    1734:	78 1f       	adc	r23, r24
    1736:	89 1f       	adc	r24, r25
    1738:	9a 1f       	adc	r25, r26
    173a:	a1 1d       	adc	r26, r1
    173c:	68 0f       	add	r22, r24
    173e:	79 1f       	adc	r23, r25
    1740:	8a 1f       	adc	r24, r26
    1742:	91 1d       	adc	r25, r1
    1744:	a1 1d       	adc	r26, r1
    1746:	6a 0f       	add	r22, r26
    1748:	71 1d       	adc	r23, r1
    174a:	81 1d       	adc	r24, r1
    174c:	91 1d       	adc	r25, r1
    174e:	a1 1d       	adc	r26, r1
    1750:	20 d0       	rcall	.+64     	; 0x1792 <__ultoa_invert+0x84>
    1752:	09 f4       	brne	.+2      	; 0x1756 <__ultoa_invert+0x48>
    1754:	68 94       	set
    1756:	3f 91       	pop	r19
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	26 9f       	mul	r18, r22
    175c:	11 24       	eor	r1, r1
    175e:	30 19       	sub	r19, r0
    1760:	30 5d       	subi	r19, 0xD0	; 208
    1762:	31 93       	st	Z+, r19
    1764:	de f6       	brtc	.-74     	; 0x171c <__ultoa_invert+0xe>
    1766:	cf 01       	movw	r24, r30
    1768:	08 95       	ret
    176a:	46 2f       	mov	r20, r22
    176c:	47 70       	andi	r20, 0x07	; 7
    176e:	40 5d       	subi	r20, 0xD0	; 208
    1770:	41 93       	st	Z+, r20
    1772:	b3 e0       	ldi	r27, 0x03	; 3
    1774:	0f d0       	rcall	.+30     	; 0x1794 <__ultoa_invert+0x86>
    1776:	c9 f7       	brne	.-14     	; 0x176a <__ultoa_invert+0x5c>
    1778:	f6 cf       	rjmp	.-20     	; 0x1766 <__ultoa_invert+0x58>
    177a:	46 2f       	mov	r20, r22
    177c:	4f 70       	andi	r20, 0x0F	; 15
    177e:	40 5d       	subi	r20, 0xD0	; 208
    1780:	4a 33       	cpi	r20, 0x3A	; 58
    1782:	18 f0       	brcs	.+6      	; 0x178a <__ultoa_invert+0x7c>
    1784:	49 5d       	subi	r20, 0xD9	; 217
    1786:	31 fd       	sbrc	r19, 1
    1788:	40 52       	subi	r20, 0x20	; 32
    178a:	41 93       	st	Z+, r20
    178c:	02 d0       	rcall	.+4      	; 0x1792 <__ultoa_invert+0x84>
    178e:	a9 f7       	brne	.-22     	; 0x177a <__ultoa_invert+0x6c>
    1790:	ea cf       	rjmp	.-44     	; 0x1766 <__ultoa_invert+0x58>
    1792:	b4 e0       	ldi	r27, 0x04	; 4
    1794:	a6 95       	lsr	r26
    1796:	97 95       	ror	r25
    1798:	87 95       	ror	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	ba 95       	dec	r27
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <__ultoa_invert+0x86>
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 05       	cpc	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	08 95       	ret
    17aa:	9b 01       	movw	r18, r22
    17ac:	ac 01       	movw	r20, r24
    17ae:	0a 2e       	mov	r0, r26
    17b0:	06 94       	lsr	r0
    17b2:	57 95       	ror	r21
    17b4:	47 95       	ror	r20
    17b6:	37 95       	ror	r19
    17b8:	27 95       	ror	r18
    17ba:	ba 95       	dec	r27
    17bc:	c9 f7       	brne	.-14     	; 0x17b0 <__ultoa_invert+0xa2>
    17be:	62 0f       	add	r22, r18
    17c0:	73 1f       	adc	r23, r19
    17c2:	84 1f       	adc	r24, r20
    17c4:	95 1f       	adc	r25, r21
    17c6:	a0 1d       	adc	r26, r0
    17c8:	08 95       	ret

000017ca <_exit>:
    17ca:	f8 94       	cli

000017cc <__stop_program>:
    17cc:	ff cf       	rjmp	.-2      	; 0x17cc <__stop_program>
